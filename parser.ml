type token =
  | NAME
  | TYPE
  | WHERE
  | IF
  | THEN
  | ELSE
  | MATCH
  | WITH
  | LET
  | REC
  | FUN
  | IN
  | FRESH
  | SWAP
  | LIST
  | INT_T
  | REAL_T
  | BOOL_T
  | STRING_T
  | UNIT_T
  | L_PAREN
  | R_PAREN
  | DONT_CARE
  | EQUAL
  | COMMA
  | DBL_LT
  | DBL_GT
  | UNIT
  | ARROW
  | BAR
  | COLON
  | SEMI
  | DBL_SEMI
  | STAR
  | ID of (string)
  | BIN_OP of (AbSyn.bin_op)
  | UN_OP of (AbSyn.un_op)
  | INT of (int)
  | REAL of (float)
  | STRING of (string)
  | BOOL of (bool)

open Parsing;;
# 1 "parser.mly"

  open Printf
  open Lexing
  open AbSyn

  let get_pos n =
    let p = Parsing.rhs_start_pos n in
    (p.pos_lnum, p.pos_cnum - p.pos_bol);;

  let parse_error s =
    let pos = Parsing.symbol_start_pos () in
    printf "[Error] %s [line %d, col %d]\n" s pos.pos_lnum (pos.pos_cnum - pos.pos_bol);
    flush stdout;;
	
	let cur_types = ref [];;	(* contains the ids of the types in the current type ...; definition. *)

	(* Expect cur_types to be non-empty whenever typ_opts is called. *)
	let typ_opts prefix =
		match !cur_types with
		| x::[] -> x
		| xs -> prefix^"{"^(List.fold_left (fun x y -> if x = "" then y else x^", "^y) "" xs)^"}";;

  let types = Hashtbl.create 50;; (* key: type name, val: actual type *)
	
  let atoms = Hashtbl.create 5;;	(* key: name type id, val: int *)

  let debug = true;;
# 74 "parser.ml"
let yytransl_const = [|
  257 (* NAME *);
  258 (* TYPE *);
  259 (* WHERE *);
  260 (* IF *);
  261 (* THEN *);
  262 (* ELSE *);
  263 (* MATCH *);
  264 (* WITH *);
  265 (* LET *);
  266 (* REC *);
  267 (* FUN *);
  268 (* IN *);
  269 (* FRESH *);
  270 (* SWAP *);
  271 (* LIST *);
  272 (* INT_T *);
  273 (* REAL_T *);
  274 (* BOOL_T *);
  275 (* STRING_T *);
  276 (* UNIT_T *);
  277 (* L_PAREN *);
  278 (* R_PAREN *);
  279 (* DONT_CARE *);
  280 (* EQUAL *);
  281 (* COMMA *);
  282 (* DBL_LT *);
  283 (* DBL_GT *);
  284 (* UNIT *);
  285 (* ARROW *);
  286 (* BAR *);
  287 (* COLON *);
  288 (* SEMI *);
  289 (* DBL_SEMI *);
  290 (* STAR *);
    0|]

let yytransl_block = [|
  291 (* ID *);
  292 (* BIN_OP *);
  293 (* UN_OP *);
  294 (* INT *);
  295 (* REAL *);
  296 (* STRING *);
  297 (* BOOL *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\002\000\002\000\005\000\005\000\
\006\000\006\000\008\000\007\000\007\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\010\000\
\011\000\011\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\004\000\004\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\003\000\
\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\002\000\002\000\002\000\002\000\003\000\001\000\003\000\
\002\000\003\000\003\000\001\000\003\000\001\000\001\000\001\000\
\001\000\001\000\004\000\001\000\003\000\003\000\003\000\009\000\
\003\000\002\000\001\000\001\000\002\000\004\000\001\000\005\000\
\003\000\001\000\006\000\001\000\002\000\003\000\001\000\001\000\
\001\000\001\000\003\000\008\000\004\000\001\000\005\000\002\000\
\004\000\004\000\008\000\002\000\003\000\003\000\003\000\002\000\
\004\000\005\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\000\000\000\000\
\039\000\040\000\042\000\041\000\059\000\000\000\000\000\000\000\
\034\000\004\000\007\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\027\000\000\000\031\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\002\000\000\000\003\000\000\000\000\000\000\000\000\000\
\009\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\000\000\000\000\000\000\000\
\000\000\043\000\000\000\053\000\000\000\000\000\000\000\000\000\
\000\000\008\000\010\000\000\000\000\000\000\000\000\000\000\000\
\033\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\000\015\000\016\000\017\000\020\000\000\000\
\000\000\018\000\000\000\013\000\000\000\000\000\000\000\000\000\
\030\000\000\000\000\000\000\000\047\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\000\000\000\000\000\
\000\000\023\000\000\000\022\000\021\000\000\000\000\000\000\000\
\000\000\000\000\019\000\000\000\000\000\000\000\000\000\000\000\
\024\000"

let yydgoto = "\002\000\
\021\000\022\000\023\000\055\000\028\000\030\000\060\000\061\000\
\107\000\039\000\040\000\069\000\025\000\088\000"

let yysindex = "\007\000\
\089\255\000\000\089\255\241\254\242\254\116\001\116\001\071\255\
\011\255\005\255\026\255\116\001\116\001\000\000\116\001\116\001\
\000\000\000\000\000\000\000\000\000\000\016\255\025\255\248\255\
\000\000\000\000\000\000\034\255\000\255\030\255\071\255\030\000\
\068\000\086\255\000\000\086\255\000\000\090\255\116\001\048\255\
\049\255\037\255\043\255\116\001\210\255\106\000\040\001\028\255\
\000\000\000\000\116\001\000\000\116\001\116\001\040\001\044\255\
\000\000\242\254\054\255\063\255\000\000\048\255\116\001\075\255\
\086\255\238\254\074\255\242\255\000\000\040\001\116\001\116\001\
\088\255\000\000\144\000\000\000\116\001\116\001\028\255\078\001\
\040\001\000\000\000\000\077\001\030\255\182\000\086\255\092\255\
\000\000\086\255\086\255\023\255\100\001\040\001\077\001\116\001\
\220\000\028\255\000\000\000\000\000\000\000\000\000\000\077\001\
\085\255\000\000\244\254\000\000\116\001\102\255\086\255\110\255\
\000\000\077\001\253\254\002\001\000\000\052\255\106\255\077\001\
\077\001\040\001\000\000\116\001\121\255\000\000\053\255\122\255\
\123\255\000\000\077\001\000\000\000\000\078\001\116\001\126\255\
\116\001\116\001\000\000\078\001\077\001\078\001\100\001\120\255\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\199\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\131\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\128\255\000\000\133\255\
\000\000\000\000\000\000\000\000\000\000\000\000\097\002\232\001\
\000\000\000\000\000\000\000\000\000\000\000\000\109\002\000\000\
\000\000\000\000\000\000\135\255\000\000\000\000\000\000\000\000\
\023\000\000\000\000\000\000\000\000\000\254\254\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\243\001\029\002\
\120\002\000\000\000\000\000\000\000\000\000\000\000\000\172\255\
\000\000\000\000\000\000\015\255\154\001\001\255\000\000\000\000\
\000\000\018\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\247\254\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\134\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\052\002\000\000\000\000\
\000\000\000\000\000\000\063\002\000\000\086\002\188\001\000\000\
\000\000"

let yygindex = "\000\000\
\150\000\000\000\000\000\255\255\000\000\124\000\000\000\102\000\
\170\255\000\000\157\000\249\255\080\000\000\000"

let yytablesize = 920
let yytable = "\024\000\
\041\000\024\000\057\000\089\000\032\000\033\000\090\000\001\000\
\115\000\026\000\045\000\046\000\025\000\047\000\048\000\011\000\
\120\000\118\000\128\000\027\000\029\000\121\000\011\000\041\000\
\058\000\120\000\066\000\127\000\067\000\026\000\121\000\042\000\
\025\000\132\000\133\000\043\000\028\000\070\000\009\000\028\000\
\010\000\011\000\075\000\034\000\139\000\035\000\044\000\049\000\
\036\000\079\000\037\000\080\000\081\000\114\000\144\000\014\000\
\050\000\065\000\056\000\071\000\066\000\086\000\015\000\054\000\
\059\000\017\000\018\000\019\000\020\000\093\000\094\000\073\000\
\072\000\130\000\136\000\097\000\098\000\074\000\082\000\110\000\
\120\000\120\000\112\000\113\000\084\000\121\000\121\000\085\000\
\003\000\004\000\005\000\034\000\006\000\035\000\116\000\007\000\
\036\000\008\000\037\000\009\000\091\000\010\000\011\000\125\000\
\087\000\038\000\034\000\122\000\035\000\012\000\068\000\036\000\
\035\000\037\000\013\000\036\000\014\000\037\000\095\000\119\000\
\065\000\111\000\134\000\015\000\065\000\016\000\017\000\018\000\
\019\000\020\000\124\000\126\000\131\000\140\000\138\000\142\000\
\143\000\034\000\035\000\035\000\034\000\035\000\034\000\145\000\
\034\000\035\000\034\000\034\000\120\000\135\000\137\000\028\000\
\026\000\121\000\034\000\035\000\141\000\034\000\035\000\034\000\
\035\000\034\000\005\000\035\000\056\000\035\000\006\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\049\000\
\049\000\049\000\049\000\049\000\049\000\083\000\049\000\049\000\
\049\000\049\000\108\000\062\000\123\000\000\000\000\000\000\000\
\049\000\049\000\000\000\049\000\049\000\049\000\049\000\049\000\
\000\000\000\000\000\000\049\000\000\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\006\000\000\000\000\000\
\007\000\000\000\031\000\000\000\009\000\000\000\010\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\012\000\076\000\
\000\000\051\000\077\000\013\000\000\000\014\000\000\000\000\000\
\000\000\000\000\000\000\053\000\015\000\054\000\016\000\017\000\
\018\000\019\000\020\000\006\000\000\000\000\000\007\000\000\000\
\031\000\000\000\009\000\000\000\010\000\011\000\034\000\000\000\
\035\000\000\000\000\000\036\000\012\000\037\000\000\000\051\000\
\000\000\013\000\000\000\014\000\092\000\000\000\000\000\052\000\
\000\000\053\000\015\000\054\000\016\000\017\000\018\000\019\000\
\020\000\006\000\063\000\000\000\007\000\000\000\031\000\000\000\
\009\000\000\000\010\000\011\000\028\000\000\000\028\000\028\000\
\000\000\028\000\012\000\028\000\000\000\051\000\000\000\013\000\
\000\000\014\000\000\000\000\000\000\000\000\000\000\000\053\000\
\015\000\054\000\016\000\017\000\018\000\019\000\020\000\006\000\
\000\000\000\000\007\000\064\000\031\000\000\000\009\000\000\000\
\010\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\000\000\000\000\051\000\000\000\013\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\053\000\015\000\054\000\
\016\000\017\000\018\000\019\000\020\000\006\000\000\000\000\000\
\007\000\000\000\031\000\000\000\009\000\000\000\010\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\
\000\000\051\000\000\000\013\000\078\000\014\000\000\000\000\000\
\000\000\000\000\000\000\053\000\015\000\054\000\016\000\017\000\
\018\000\019\000\020\000\006\000\000\000\000\000\007\000\000\000\
\031\000\000\000\009\000\000\000\010\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\051\000\
\096\000\013\000\000\000\014\000\000\000\000\000\000\000\000\000\
\000\000\053\000\015\000\054\000\016\000\017\000\018\000\019\000\
\020\000\006\000\000\000\109\000\007\000\000\000\031\000\000\000\
\009\000\000\000\010\000\011\000\000\000\000\000\000\000\000\000\
\000\000\000\000\012\000\000\000\000\000\051\000\000\000\013\000\
\000\000\014\000\000\000\000\000\000\000\000\000\000\000\053\000\
\015\000\054\000\016\000\017\000\018\000\019\000\020\000\006\000\
\000\000\000\000\007\000\000\000\031\000\000\000\009\000\000\000\
\010\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\117\000\000\000\051\000\000\000\013\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\053\000\015\000\054\000\
\016\000\017\000\018\000\019\000\020\000\006\000\000\000\000\000\
\007\000\000\000\031\000\000\000\009\000\000\000\010\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\012\000\129\000\
\000\000\051\000\000\000\013\000\000\000\014\000\000\000\000\000\
\000\000\000\000\000\000\053\000\015\000\054\000\016\000\017\000\
\018\000\019\000\020\000\006\000\000\000\000\000\007\000\000\000\
\031\000\000\000\009\000\000\000\010\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\051\000\
\000\000\013\000\000\000\014\000\000\000\000\000\000\000\000\000\
\000\000\053\000\015\000\054\000\016\000\017\000\018\000\019\000\
\020\000\006\000\000\000\000\000\007\000\000\000\031\000\000\000\
\009\000\000\000\010\000\011\000\099\000\100\000\101\000\102\000\
\103\000\104\000\012\000\000\000\000\000\051\000\105\000\013\000\
\000\000\014\000\000\000\000\000\000\000\000\000\000\000\106\000\
\015\000\054\000\016\000\017\000\018\000\019\000\020\000\006\000\
\000\000\000\000\007\000\000\000\031\000\000\000\009\000\000\000\
\010\000\011\000\000\000\000\000\000\000\000\000\015\000\054\000\
\012\000\017\000\018\000\019\000\020\000\013\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\
\016\000\017\000\018\000\019\000\020\000\050\000\050\000\050\000\
\050\000\050\000\050\000\000\000\000\000\050\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000\050\000\
\000\000\050\000\050\000\050\000\050\000\000\000\000\000\050\000\
\000\000\050\000\000\000\050\000\000\000\000\000\050\000\044\000\
\044\000\044\000\044\000\044\000\044\000\000\000\000\000\044\000\
\000\000\000\000\000\000\036\000\036\000\000\000\036\000\000\000\
\044\000\044\000\036\000\044\000\044\000\044\000\044\000\000\000\
\000\000\044\000\000\000\044\000\036\000\044\000\036\000\036\000\
\044\000\036\000\000\000\000\000\036\000\000\000\036\000\000\000\
\036\000\000\000\036\000\052\000\052\000\052\000\000\000\052\000\
\052\000\000\000\000\000\052\000\000\000\000\000\038\000\038\000\
\038\000\000\000\038\000\038\000\000\000\052\000\038\000\000\000\
\052\000\000\000\052\000\000\000\000\000\052\000\000\000\052\000\
\038\000\052\000\000\000\038\000\000\000\038\000\000\000\000\000\
\038\000\000\000\038\000\000\000\038\000\045\000\045\000\045\000\
\000\000\045\000\045\000\000\000\000\000\045\000\000\000\000\000\
\000\000\054\000\054\000\000\000\054\000\000\000\000\000\045\000\
\054\000\000\000\045\000\000\000\045\000\000\000\000\000\045\000\
\000\000\045\000\054\000\045\000\000\000\054\000\000\000\054\000\
\057\000\057\000\054\000\057\000\054\000\000\000\054\000\057\000\
\000\000\000\000\000\000\058\000\058\000\000\000\058\000\000\000\
\000\000\057\000\058\000\000\000\057\000\000\000\057\000\000\000\
\000\000\057\000\000\000\057\000\058\000\057\000\000\000\058\000\
\000\000\058\000\051\000\051\000\058\000\051\000\058\000\000\000\
\058\000\051\000\000\000\000\000\000\000\037\000\037\000\000\000\
\037\000\000\000\000\000\051\000\037\000\000\000\051\000\000\000\
\051\000\048\000\048\000\051\000\048\000\051\000\037\000\051\000\
\048\000\037\000\000\000\037\000\055\000\055\000\037\000\055\000\
\037\000\000\000\048\000\055\000\000\000\048\000\000\000\048\000\
\000\000\000\000\048\000\000\000\048\000\055\000\000\000\000\000\
\055\000\000\000\055\000\000\000\000\000\055\000\000\000\055\000"

let yycheck = "\001\000\
\008\000\003\000\003\001\022\001\006\000\007\000\025\001\001\000\
\095\000\012\001\012\000\013\000\012\001\015\000\016\000\025\001\
\029\001\104\000\022\001\035\001\035\001\034\001\032\001\031\000\
\025\001\029\001\034\000\114\000\036\000\032\001\034\001\021\001\
\032\001\120\000\121\000\031\001\022\001\039\000\011\001\025\001\
\013\001\014\001\044\000\021\001\131\000\023\001\021\001\032\001\
\026\001\051\000\028\001\053\000\054\000\031\001\141\000\028\001\
\032\001\035\001\025\001\012\001\068\000\063\000\035\001\036\001\
\035\001\038\001\039\001\040\001\041\001\071\000\072\000\035\001\
\024\001\022\001\022\001\077\000\078\000\035\001\035\001\087\000\
\029\001\029\001\090\000\091\000\031\001\034\001\034\001\025\001\
\000\001\001\001\002\001\021\001\004\001\023\001\096\000\007\001\
\026\001\009\001\028\001\011\001\027\001\013\001\014\001\111\000\
\030\001\035\001\021\001\109\000\023\001\021\001\021\001\026\001\
\023\001\028\001\026\001\026\001\028\001\028\001\031\001\035\001\
\035\001\030\001\124\000\035\001\035\001\037\001\038\001\039\001\
\040\001\041\001\029\001\022\001\027\001\135\000\012\001\137\000\
\138\000\004\001\005\001\006\001\007\001\008\001\009\001\024\001\
\011\001\012\001\013\001\014\001\029\001\029\001\029\001\024\001\
\003\000\034\001\021\001\022\001\031\001\024\001\025\001\026\001\
\027\001\028\001\032\001\030\001\032\001\032\001\032\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\004\001\
\005\001\006\001\007\001\008\001\009\001\058\000\011\001\012\001\
\013\001\014\001\085\000\031\000\109\000\255\255\255\255\255\255\
\021\001\022\001\255\255\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\032\001\255\255\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\004\001\255\255\255\255\
\007\001\255\255\009\001\255\255\011\001\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\021\001\022\001\
\255\255\024\001\025\001\026\001\255\255\028\001\255\255\255\255\
\255\255\255\255\255\255\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\004\001\255\255\255\255\007\001\255\255\
\009\001\255\255\011\001\255\255\013\001\014\001\021\001\255\255\
\023\001\255\255\255\255\026\001\021\001\028\001\255\255\024\001\
\255\255\026\001\255\255\028\001\035\001\255\255\255\255\032\001\
\255\255\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\004\001\005\001\255\255\007\001\255\255\009\001\255\255\
\011\001\255\255\013\001\014\001\022\001\255\255\024\001\025\001\
\255\255\027\001\021\001\029\001\255\255\024\001\255\255\026\001\
\255\255\028\001\255\255\255\255\255\255\255\255\255\255\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\004\001\
\255\255\255\255\007\001\008\001\009\001\255\255\011\001\255\255\
\013\001\014\001\255\255\255\255\255\255\255\255\255\255\255\255\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\028\001\
\255\255\255\255\255\255\255\255\255\255\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\004\001\255\255\255\255\
\007\001\255\255\009\001\255\255\011\001\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\021\001\255\255\
\255\255\024\001\255\255\026\001\027\001\028\001\255\255\255\255\
\255\255\255\255\255\255\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\004\001\255\255\255\255\007\001\255\255\
\009\001\255\255\011\001\255\255\013\001\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\021\001\255\255\255\255\024\001\
\025\001\026\001\255\255\028\001\255\255\255\255\255\255\255\255\
\255\255\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\004\001\255\255\006\001\007\001\255\255\009\001\255\255\
\011\001\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\021\001\255\255\255\255\024\001\255\255\026\001\
\255\255\028\001\255\255\255\255\255\255\255\255\255\255\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\004\001\
\255\255\255\255\007\001\255\255\009\001\255\255\011\001\255\255\
\013\001\014\001\255\255\255\255\255\255\255\255\255\255\255\255\
\021\001\022\001\255\255\024\001\255\255\026\001\255\255\028\001\
\255\255\255\255\255\255\255\255\255\255\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\004\001\255\255\255\255\
\007\001\255\255\009\001\255\255\011\001\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\021\001\022\001\
\255\255\024\001\255\255\026\001\255\255\028\001\255\255\255\255\
\255\255\255\255\255\255\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\004\001\255\255\255\255\007\001\255\255\
\009\001\255\255\011\001\255\255\013\001\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\021\001\255\255\255\255\024\001\
\255\255\026\001\255\255\028\001\255\255\255\255\255\255\255\255\
\255\255\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\004\001\255\255\255\255\007\001\255\255\009\001\255\255\
\011\001\255\255\013\001\014\001\016\001\017\001\018\001\019\001\
\020\001\021\001\021\001\255\255\255\255\024\001\026\001\026\001\
\255\255\028\001\255\255\255\255\255\255\255\255\255\255\035\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\004\001\
\255\255\255\255\007\001\255\255\009\001\255\255\011\001\255\255\
\013\001\014\001\255\255\255\255\255\255\255\255\035\001\036\001\
\021\001\038\001\039\001\040\001\041\001\026\001\255\255\028\001\
\255\255\255\255\255\255\255\255\255\255\255\255\035\001\255\255\
\037\001\038\001\039\001\040\001\041\001\004\001\005\001\006\001\
\007\001\008\001\009\001\255\255\255\255\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\021\001\022\001\
\255\255\024\001\025\001\026\001\027\001\255\255\255\255\030\001\
\255\255\032\001\255\255\034\001\255\255\255\255\037\001\004\001\
\005\001\006\001\007\001\008\001\009\001\255\255\255\255\012\001\
\255\255\255\255\255\255\005\001\006\001\255\255\008\001\255\255\
\021\001\022\001\012\001\024\001\025\001\026\001\027\001\255\255\
\255\255\030\001\255\255\032\001\022\001\034\001\024\001\025\001\
\037\001\027\001\255\255\255\255\030\001\255\255\032\001\255\255\
\034\001\255\255\036\001\004\001\005\001\006\001\255\255\008\001\
\009\001\255\255\255\255\012\001\255\255\255\255\004\001\005\001\
\006\001\255\255\008\001\009\001\255\255\022\001\012\001\255\255\
\025\001\255\255\027\001\255\255\255\255\030\001\255\255\032\001\
\022\001\034\001\255\255\025\001\255\255\027\001\255\255\255\255\
\030\001\255\255\032\001\255\255\034\001\004\001\005\001\006\001\
\255\255\008\001\009\001\255\255\255\255\012\001\255\255\255\255\
\255\255\005\001\006\001\255\255\008\001\255\255\255\255\022\001\
\012\001\255\255\025\001\255\255\027\001\255\255\255\255\030\001\
\255\255\032\001\022\001\034\001\255\255\025\001\255\255\027\001\
\005\001\006\001\030\001\008\001\032\001\255\255\034\001\012\001\
\255\255\255\255\255\255\005\001\006\001\255\255\008\001\255\255\
\255\255\022\001\012\001\255\255\025\001\255\255\027\001\255\255\
\255\255\030\001\255\255\032\001\022\001\034\001\255\255\025\001\
\255\255\027\001\005\001\006\001\030\001\008\001\032\001\255\255\
\034\001\012\001\255\255\255\255\255\255\005\001\006\001\255\255\
\008\001\255\255\255\255\022\001\012\001\255\255\025\001\255\255\
\027\001\005\001\006\001\030\001\008\001\032\001\022\001\034\001\
\012\001\025\001\255\255\027\001\005\001\006\001\030\001\008\001\
\032\001\255\255\022\001\012\001\255\255\025\001\255\255\027\001\
\255\255\255\255\030\001\255\255\032\001\022\001\255\255\255\255\
\025\001\255\255\027\001\255\255\255\255\030\001\255\255\032\001"

let yynames_const = "\
  NAME\000\
  TYPE\000\
  WHERE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  MATCH\000\
  WITH\000\
  LET\000\
  REC\000\
  FUN\000\
  IN\000\
  FRESH\000\
  SWAP\000\
  LIST\000\
  INT_T\000\
  REAL_T\000\
  BOOL_T\000\
  STRING_T\000\
  UNIT_T\000\
  L_PAREN\000\
  R_PAREN\000\
  DONT_CARE\000\
  EQUAL\000\
  COMMA\000\
  DBL_LT\000\
  DBL_GT\000\
  UNIT\000\
  ARROW\000\
  BAR\000\
  COLON\000\
  SEMI\000\
  DBL_SEMI\000\
  STAR\000\
  "

let yynames_block = "\
  ID\000\
  BIN_OP\000\
  UN_OP\000\
  INT\000\
  REAL\000\
  STRING\000\
  BOOL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'user_types) in
    Obj.repr(
# 64 "parser.mly"
                    ( (atoms, _1, []) )
# 502 "parser.ml"
               : ((string, int) Hashtbl.t) * ((string, AbSyn.typ) Hashtbl.t) * AbSyn.exp list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'top_let) in
    Obj.repr(
# 65 "parser.mly"
                 ( (atoms, types, [_1]) )
# 509 "parser.ml"
               : ((string, int) Hashtbl.t) * ((string, AbSyn.typ) Hashtbl.t) * AbSyn.exp list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 66 "parser.mly"
             ( (atoms, types, [_1]) )
# 516 "parser.ml"
               : ((string, int) Hashtbl.t) * ((string, AbSyn.typ) Hashtbl.t) * AbSyn.exp list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ((string, int) Hashtbl.t) * ((string, AbSyn.typ) Hashtbl.t) * AbSyn.exp list) in
    Obj.repr(
# 67 "parser.mly"
                  ( _2 )
# 523 "parser.ml"
               : ((string, int) Hashtbl.t) * ((string, AbSyn.typ) Hashtbl.t) * AbSyn.exp list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'nty) in
    Obj.repr(
# 71 "parser.mly"
             ( printf "\n"; types )
# 530 "parser.ml"
               : 'user_types))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dty) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ctor_list) in
    Obj.repr(
# 72 "parser.mly"
                       ( printf "type %s = %s\n" _2 _3; cur_types := []; types )
# 538 "parser.ml"
               : 'user_types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 76 "parser.mly"
       (
			if Hashtbl.mem atoms _1 then
				(parse_error ("Re-declaration of name type: "^_1); raise Parse_error)
			else
				(printf "name %s" _1;
				Hashtbl.add atoms _1 0;
				Hashtbl.add types _1 (NameT _1))
		)
# 552 "parser.ml"
               : 'nty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'nty) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 84 "parser.mly"
                 (
			if Hashtbl.mem atoms _3 then
				(parse_error ("Re-declaration of name type: "^_3); raise Parse_error)
			else
				(printf ", %s" _3;
				Hashtbl.add atoms _3 0;
				Hashtbl.add types _3 (NameT _3))
		)
# 567 "parser.ml"
               : 'nty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 95 "parser.mly"
             (
			Hashtbl.add types _1 (DataT _1);
			cur_types := (_1 :: !cur_types);
			_1
		)
# 578 "parser.ml"
               : 'dty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dty) in
    Obj.repr(
# 100 "parser.mly"
                 (
			Hashtbl.add types _1 (DataT _1);
			cur_types := (_1 :: !cur_types);
			(_1 ^ ", " ^ _3)
		)
# 590 "parser.ml"
               : 'dty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 108 "parser.mly"
                       (
			(* Check that type_name is a function type to one of the just-defined types *)
			(* TODO Do we want to remove ctors for data type on error? *)
			(match _3 with
			| FuncT(t1, DataT(s)) ->
					if List.mem s !cur_types then ()
					else
						(parse_error ("Got "^s^" but expected "^(typ_opts "one of ")^" in constructor "^_1);
						cur_types := [];
						raise Parse_error)
			| _ ->
					(parse_error ("Got "^(string_of_typ _3)^" but expected "^(typ_opts "α -> β where β ∈ ")^
						" in constructor "^_1);
					cur_types := [];
					raise Parse_error));
			Hashtbl.add types _1 (CtorT _3);
			_1 ^ " : " ^ (string_of_typ _3)
		)
# 615 "parser.ml"
               : 'ctor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ctor) in
    Obj.repr(
# 129 "parser.mly"
         ( "\n  " ^ _1 )
# 622 "parser.ml"
               : 'ctor_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ctor_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ctor) in
    Obj.repr(
# 130 "parser.mly"
                         ( _1 ^ ",\n  " ^ _3 )
# 630 "parser.ml"
               : 'ctor_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 134 "parser.mly"
           ( IntT )
# 636 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
           ( RealT )
# 642 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 136 "parser.mly"
           ( BoolT )
# 648 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "parser.mly"
             ( StringT )
# 654 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 138 "parser.mly"
       (
      try let t = Hashtbl.find types _1 in t with
      Not_found -> parse_error ("Undefined identifier: "^_1); raise Parse_error
    )
# 664 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 142 "parser.mly"
                               (
      try let NameT(s) = Hashtbl.find types _2 in NameAbT(NameT(s), _4) with
      | Not_found ->
          parse_error ("Undefined identifier: "^_2); raise Parse_error
      | Match_failure _ ->
          parse_error ("Expected name type in name abstraction");
          raise Parse_error
    )
# 679 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 150 "parser.mly"
           ( UnitT )
# 685 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 151 "parser.mly"
                             ( ProdT(_1, _3) )
# 693 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 152 "parser.mly"
                              ( FuncT(_1, _3) )
# 701 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'type_name) in
    Obj.repr(
# 153 "parser.mly"
                             ( _2 )
# 708 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'type_name) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'type_name) in
    Obj.repr(
# 157 "parser.mly"
                                                                (
      Hashtbl.add types _1 (FuncT(_5, _8));
      (_1, _3, _5, _8)
    )
# 721 "parser.ml"
               : 'rec_func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 164 "parser.mly"
                      ( ValBind(_1, _3) )
# 729 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'rec_func) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 165 "parser.mly"
                 ( let (a, b, c, d) = _1 in RecF(RecFunc(a, b, c, d, _2, [])) )
# 737 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    Obj.repr(
# 169 "parser.mly"
              ( DontCareP )
# 743 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 170 "parser.mly"
       ( IdP(_1) )
# 750 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 171 "parser.mly"
               ( CtorP(_1, _2) )
# 758 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 172 "parser.mly"
                                  ( NameAbsP(_2, _4) )
# 766 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 173 "parser.mly"
         ( UnitP )
# 772 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 174 "parser.mly"
                                          ( ProdP(_2, _4) )
# 780 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 175 "parser.mly"
                            ( _2 )
# 787 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sub_exp) in
    Obj.repr(
# 179 "parser.mly"
           ( _1 )
# 794 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'sub_exp) in
    Obj.repr(
# 180 "parser.mly"
                                 (
      (If(_2, _4, _6), get_pos 1)
    )
# 805 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 186 "parser.mly"
      ( (Id _1, get_pos 1) )
# 812 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 187 "parser.mly"
           (
      try
        let t = Hashtbl.find types _1 in
        (match t with
        | CtorT _ -> (Ctor(_1, _2), get_pos 1)
        | _ -> (App((Id(_1), get_pos 1), _2), get_pos 1))
      with
      | Not_found -> (App((Id(_1), get_pos 1), _2), get_pos 1)
    )
# 828 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 196 "parser.mly"
                 ( (BinaryOp(_1, Eq, _3), get_pos 1) )
# 836 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 197 "parser.mly"
        ( (IntLiteral(_1), get_pos 1) )
# 843 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 198 "parser.mly"
         ( (RealLiteral(_1), get_pos 1) )
# 850 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 199 "parser.mly"
         ( (BoolLiteral(_1), get_pos 1) )
# 857 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 200 "parser.mly"
           ( (StringLiteral(_1), get_pos 1) )
# 864 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 201 "parser.mly"
                   ( (Fresh _3, get_pos 1) )
# 871 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 202 "parser.mly"
                                              (
      (Swap(_3, _5, _8), get_pos 1)
    )
# 882 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 205 "parser.mly"
                          (
      (NameAb(_2, _4), get_pos 1)
    )
# 892 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 208 "parser.mly"
         ( (Unit, get_pos 1) )
# 898 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 209 "parser.mly"
                                  (
      (Pair(_2, _4), get_pos 1)
    )
# 908 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 212 "parser.mly"
            ( (App(_1, _2), get_pos 1) )
# 916 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'branch) in
    Obj.repr(
# 213 "parser.mly"
                          ( (Match(_2, _4), get_pos 1) )
# 924 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'dec) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 214 "parser.mly"
                   ( (Let(_2, _4), get_pos 1) )
# 932 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'type_name) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 215 "parser.mly"
                                                     (
      (Lambda(_3, _5, _8, []), get_pos 1)
    )
# 943 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : AbSyn.un_op) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 218 "parser.mly"
              ( (UnaryOp(_1, _2), get_pos 1) )
# 951 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 219 "parser.mly"
                        ( _2 )
# 958 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 221 "parser.mly"
                 ( (BinaryOp(_1, Mult, _3), get_pos 1) )
# 966 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : AbSyn.bin_op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 222 "parser.mly"
                   ( (BinaryOp(_1, _2, _3), get_pos 1) )
# 975 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 226 "parser.mly"
            ( (TopLet(_2, get_pos 2), get_pos 1) )
# 982 "parser.ml"
               : 'top_let))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 230 "parser.mly"
                          ( [(_2, _4)] )
# 990 "parser.ml"
               : 'branch))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'branch) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 231 "parser.mly"
                                 ( _1 @ [_3, _5] (* TODO consider using a different data structure to avoid costly appends *) )
# 999 "parser.ml"
               : 'branch))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : ((string, int) Hashtbl.t) * ((string, AbSyn.typ) Hashtbl.t) * AbSyn.exp list)
;;
# 234 "parser.mly"


# 1027 "parser.ml"
