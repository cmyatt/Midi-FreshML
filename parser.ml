type token =
  | NAME
  | TYPE
  | WHERE
  | IF
  | THEN
  | ELSE
  | MATCH
  | WITH
  | LET
  | REC
  | FUN
  | IN
  | FRESH
  | SWAP
  | LIST
  | INT_T
  | REAL_T
  | BOOL_T
  | STRING_T
  | UNIT_T
  | L_PAREN
  | R_PAREN
  | HASH
  | DONT_CARE
  | EQUAL
  | COMMA
  | DBL_LT
  | DBL_GT
  | UNIT
  | ARROW
  | BAR
  | COLON
  | SEMI
  | DBL_SEMI
  | STAR
  | ID of (string)
  | BIN_OP of (AbSyn.bin_op)
  | UN_OP of (AbSyn.un_op)
  | INT of (int)
  | REAL of (float)
  | STRING of (string)
  | BOOL of (bool)

open Parsing;;
# 1 "parser.mly"

  open Printf
  open Lexing
  open AbSyn

  let get_pos n =
    let p = Parsing.rhs_start_pos n in
    (p.pos_lnum, p.pos_cnum - p.pos_bol);;

  let parse_error s =
    let pos = Parsing.symbol_start_pos () in
    printf "[Error] %s [line %d, col %d]\n" s pos.pos_lnum (pos.pos_cnum - pos.pos_bol);
    flush stdout;;
  
  let cur_types = ref [];;  (* contains the ids of the types in the current type ...; definition. *)

  (* Expect cur_types to be non-empty whenever typ_opts is called. *)
  let typ_opts prefix =
    match !cur_types with
    | x::[] -> x
    | xs -> prefix^"{"^(List.fold_left (fun x y -> if x = "" then y else x^", "^y) "" xs)^"}";;

  let types = Hashtbl.create 50;; (* key: type name, val: actual type *)
  
  let atoms = Hashtbl.create 5;;  (* key: name type id, val: int *)

  let debug = true;;

	let print_info = ref true;;
# 77 "parser.ml"
let yytransl_const = [|
  257 (* NAME *);
  258 (* TYPE *);
  259 (* WHERE *);
  260 (* IF *);
  261 (* THEN *);
  262 (* ELSE *);
  263 (* MATCH *);
  264 (* WITH *);
  265 (* LET *);
  266 (* REC *);
  267 (* FUN *);
  268 (* IN *);
  269 (* FRESH *);
  270 (* SWAP *);
  271 (* LIST *);
  272 (* INT_T *);
  273 (* REAL_T *);
  274 (* BOOL_T *);
  275 (* STRING_T *);
  276 (* UNIT_T *);
  277 (* L_PAREN *);
  278 (* R_PAREN *);
  279 (* HASH *);
  280 (* DONT_CARE *);
  281 (* EQUAL *);
  282 (* COMMA *);
  283 (* DBL_LT *);
  284 (* DBL_GT *);
  285 (* UNIT *);
  286 (* ARROW *);
  287 (* BAR *);
  288 (* COLON *);
  289 (* SEMI *);
  290 (* DBL_SEMI *);
  291 (* STAR *);
    0|]

let yytransl_block = [|
  292 (* ID *);
  293 (* BIN_OP *);
  294 (* UN_OP *);
  295 (* INT *);
  296 (* REAL *);
  297 (* STRING *);
  298 (* BOOL *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\002\000\002\000\006\000\006\000\
\007\000\007\000\009\000\008\000\008\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\011\000\
\012\000\012\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\004\000\004\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\003\000\015\000\015\000\005\000\005\000\
\000\000"

let yylen = "\002\000\
\002\000\002\000\002\000\002\000\002\000\003\000\001\000\003\000\
\002\000\003\000\003\000\001\000\003\000\001\000\001\000\001\000\
\001\000\001\000\004\000\001\000\003\000\003\000\003\000\009\000\
\003\000\002\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000\004\000\001\000\005\000\003\000\001\000\006\000\001\000\
\002\000\003\000\001\000\001\000\001\000\001\000\003\000\008\000\
\004\000\001\000\005\000\002\000\004\000\004\000\008\000\002\000\
\003\000\003\000\003\000\002\000\004\000\005\000\002\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\050\000\000\000\000\000\
\043\000\044\000\046\000\045\000\065\000\000\000\000\000\000\000\
\000\000\038\000\007\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\027\000\000\000\035\000\000\000\029\000\030\000\
\032\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\063\000\000\000\000\000\000\000\001\000\002\000\000\000\
\003\000\000\000\000\000\000\000\004\000\064\000\000\000\009\000\
\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\033\000\000\000\000\000\000\000\000\000\
\047\000\000\000\057\000\000\000\000\000\000\000\000\000\000\000\
\008\000\010\000\000\000\000\000\000\000\000\000\000\000\037\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\015\000\016\000\017\000\020\000\000\000\000\000\
\018\000\000\000\013\000\000\000\000\000\000\000\000\000\034\000\
\000\000\000\000\000\000\051\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\036\000\000\000\000\000\000\000\
\023\000\000\000\022\000\021\000\000\000\000\000\000\000\000\000\
\000\000\019\000\000\000\000\000\000\000\000\000\000\000\024\000"

let yydgoto = "\002\000\
\021\000\022\000\023\000\060\000\025\000\028\000\030\000\067\000\
\068\000\114\000\043\000\044\000\076\000\026\000\095\000"

let yysindex = "\005\000\
\096\255\000\000\239\254\005\255\136\001\136\001\131\002\022\255\
\020\255\032\255\136\001\025\255\136\001\000\000\136\001\136\001\
\000\000\000\000\000\000\000\000\000\000\023\255\030\255\002\000\
\236\254\000\000\000\000\038\255\254\254\029\255\131\002\041\000\
\080\000\153\002\000\000\153\002\000\000\175\002\000\000\000\000\
\000\000\000\000\136\001\055\255\043\255\035\255\036\255\136\001\
\219\255\000\000\119\000\058\001\009\255\000\000\000\000\136\001\
\000\000\136\001\136\001\058\001\000\000\000\000\039\255\000\000\
\005\255\042\255\053\255\000\000\055\255\136\001\059\255\153\002\
\013\255\063\255\197\002\000\000\058\001\136\001\136\001\074\255\
\000\000\158\000\000\000\136\001\136\001\009\255\097\001\058\001\
\000\000\000\000\096\001\029\255\197\000\153\002\064\255\000\000\
\153\002\153\002\109\002\119\001\058\001\096\001\136\001\236\000\
\009\255\000\000\000\000\000\000\000\000\000\000\096\001\082\255\
\000\000\002\255\000\000\136\001\090\255\153\002\099\255\000\000\
\096\001\237\254\019\001\000\000\051\255\094\255\096\001\096\001\
\058\001\000\000\136\001\097\255\000\000\066\255\098\255\112\255\
\000\000\096\001\000\000\000\000\097\001\136\001\101\255\136\001\
\136\001\000\000\097\001\096\001\097\001\119\001\069\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\234\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\093\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\104\255\000\000\000\000\
\000\000\000\000\000\000\106\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\054\255\246\001\000\000\000\000\000\000\
\000\000\000\000\000\000\094\002\000\000\000\000\000\000\000\000\
\000\000\000\000\107\255\000\000\000\000\000\000\000\000\086\255\
\000\000\000\000\000\000\000\000\251\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\022\002\046\002\106\002\
\000\000\000\000\000\000\000\000\000\000\000\000\180\255\000\000\
\000\000\000\000\014\255\175\001\253\254\000\000\000\000\000\000\
\034\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\248\254\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\141\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\058\002\000\000\000\000\000\000\
\000\000\000\000\070\002\000\000\082\002\210\001\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\255\255\000\000\000\000\066\000\000\000\
\050\000\162\255\000\000\120\000\251\255\040\000\000\000"

let yytablesize = 1007
let yytable = "\024\000\
\064\000\045\000\135\000\032\000\033\000\001\000\026\000\122\000\
\025\000\049\000\127\000\051\000\061\000\052\000\053\000\128\000\
\125\000\011\000\027\000\008\000\062\000\009\000\010\000\065\000\
\011\000\045\000\134\000\026\000\073\000\025\000\074\000\127\000\
\139\000\140\000\096\000\028\000\128\000\014\000\097\000\028\000\
\029\000\077\000\046\000\146\000\015\000\059\000\082\000\017\000\
\018\000\019\000\020\000\047\000\048\000\151\000\086\000\054\000\
\087\000\088\000\041\000\041\000\050\000\041\000\055\000\063\000\
\066\000\041\000\078\000\079\000\093\000\073\000\080\000\081\000\
\137\000\091\000\089\000\041\000\100\000\101\000\092\000\041\000\
\127\000\041\000\104\000\105\000\041\000\128\000\041\000\143\000\
\117\000\094\000\098\000\119\000\120\000\152\000\118\000\127\000\
\003\000\004\000\127\000\005\000\128\000\123\000\006\000\128\000\
\007\000\102\000\008\000\028\000\009\000\010\000\028\000\028\000\
\132\000\028\000\129\000\028\000\011\000\126\000\012\000\131\000\
\133\000\138\000\013\000\145\000\014\000\005\000\142\000\144\000\
\028\000\141\000\090\000\015\000\148\000\016\000\017\000\018\000\
\019\000\020\000\060\000\006\000\147\000\115\000\149\000\150\000\
\038\000\039\000\039\000\038\000\039\000\038\000\069\000\038\000\
\039\000\038\000\038\000\130\000\000\000\000\000\000\000\000\000\
\000\000\038\000\039\000\000\000\000\000\038\000\039\000\038\000\
\039\000\038\000\000\000\039\000\000\000\039\000\000\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\053\000\
\053\000\053\000\053\000\053\000\053\000\000\000\053\000\053\000\
\053\000\053\000\000\000\000\000\000\000\000\000\000\000\000\000\
\053\000\053\000\000\000\000\000\053\000\053\000\053\000\053\000\
\053\000\000\000\000\000\000\000\053\000\000\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\005\000\000\000\
\000\000\006\000\000\000\031\000\000\000\008\000\000\000\009\000\
\010\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\
\083\000\000\000\000\000\056\000\084\000\013\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\058\000\015\000\059\000\
\016\000\017\000\018\000\019\000\020\000\005\000\000\000\000\000\
\006\000\000\000\031\000\000\000\008\000\000\000\009\000\010\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
\000\000\000\000\056\000\000\000\013\000\000\000\014\000\000\000\
\000\000\000\000\057\000\000\000\058\000\015\000\059\000\016\000\
\017\000\018\000\019\000\020\000\005\000\070\000\000\000\006\000\
\000\000\031\000\000\000\008\000\000\000\009\000\010\000\000\000\
\000\000\000\000\000\000\000\000\000\000\011\000\000\000\000\000\
\000\000\056\000\000\000\013\000\000\000\014\000\000\000\000\000\
\000\000\000\000\000\000\058\000\015\000\059\000\016\000\017\000\
\018\000\019\000\020\000\005\000\000\000\000\000\006\000\071\000\
\031\000\000\000\008\000\000\000\009\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\
\056\000\000\000\013\000\000\000\014\000\000\000\000\000\000\000\
\000\000\000\000\058\000\015\000\059\000\016\000\017\000\018\000\
\019\000\020\000\005\000\000\000\000\000\006\000\000\000\031\000\
\000\000\008\000\000\000\009\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\000\000\000\000\000\000\000\056\000\
\000\000\013\000\085\000\014\000\000\000\000\000\000\000\000\000\
\000\000\058\000\015\000\059\000\016\000\017\000\018\000\019\000\
\020\000\005\000\000\000\000\000\006\000\000\000\031\000\000\000\
\008\000\000\000\009\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\000\000\000\000\000\000\000\056\000\103\000\
\013\000\000\000\014\000\000\000\000\000\000\000\000\000\000\000\
\058\000\015\000\059\000\016\000\017\000\018\000\019\000\020\000\
\005\000\000\000\116\000\006\000\000\000\031\000\000\000\008\000\
\000\000\009\000\010\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\000\000\000\000\056\000\000\000\013\000\
\000\000\014\000\000\000\000\000\000\000\000\000\000\000\058\000\
\015\000\059\000\016\000\017\000\018\000\019\000\020\000\005\000\
\000\000\000\000\006\000\000\000\031\000\000\000\008\000\000\000\
\009\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\
\011\000\124\000\000\000\000\000\056\000\000\000\013\000\000\000\
\014\000\000\000\000\000\000\000\000\000\000\000\058\000\015\000\
\059\000\016\000\017\000\018\000\019\000\020\000\005\000\000\000\
\000\000\006\000\000\000\031\000\000\000\008\000\000\000\009\000\
\010\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\
\136\000\000\000\000\000\056\000\000\000\013\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\058\000\015\000\059\000\
\016\000\017\000\018\000\019\000\020\000\005\000\000\000\000\000\
\006\000\000\000\031\000\000\000\008\000\000\000\009\000\010\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
\000\000\000\000\056\000\000\000\013\000\000\000\014\000\000\000\
\000\000\000\000\000\000\000\000\058\000\015\000\059\000\016\000\
\017\000\018\000\019\000\020\000\005\000\000\000\000\000\006\000\
\000\000\031\000\000\000\008\000\000\000\009\000\010\000\106\000\
\107\000\108\000\109\000\110\000\111\000\011\000\000\000\000\000\
\000\000\056\000\112\000\013\000\000\000\014\000\000\000\000\000\
\000\000\000\000\000\000\113\000\015\000\059\000\016\000\017\000\
\018\000\019\000\020\000\005\000\000\000\000\000\006\000\000\000\
\031\000\000\000\008\000\000\000\009\000\010\000\000\000\000\000\
\000\000\000\000\015\000\059\000\011\000\017\000\018\000\019\000\
\020\000\000\000\013\000\000\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\000\000\000\016\000\017\000\018\000\
\019\000\020\000\054\000\054\000\054\000\054\000\054\000\054\000\
\000\000\000\000\054\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\054\000\054\000\000\000\000\000\054\000\
\054\000\054\000\054\000\000\000\000\000\054\000\000\000\054\000\
\000\000\054\000\000\000\000\000\054\000\048\000\048\000\048\000\
\048\000\048\000\048\000\000\000\000\000\048\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\048\000\048\000\
\000\000\000\000\048\000\048\000\048\000\048\000\040\000\040\000\
\048\000\040\000\048\000\000\000\048\000\040\000\000\000\048\000\
\000\000\056\000\056\000\056\000\000\000\056\000\056\000\040\000\
\000\000\056\000\040\000\040\000\000\000\040\000\000\000\000\000\
\040\000\000\000\040\000\056\000\040\000\000\000\040\000\056\000\
\000\000\056\000\000\000\000\000\056\000\000\000\056\000\000\000\
\056\000\042\000\042\000\042\000\000\000\042\000\042\000\000\000\
\000\000\042\000\000\000\000\000\000\000\049\000\049\000\049\000\
\000\000\049\000\049\000\042\000\000\000\049\000\000\000\042\000\
\000\000\042\000\058\000\058\000\042\000\058\000\042\000\049\000\
\042\000\058\000\000\000\049\000\000\000\049\000\061\000\061\000\
\049\000\061\000\049\000\058\000\049\000\061\000\000\000\058\000\
\000\000\058\000\062\000\062\000\058\000\062\000\058\000\061\000\
\058\000\062\000\000\000\061\000\000\000\061\000\055\000\055\000\
\061\000\055\000\061\000\062\000\061\000\055\000\000\000\062\000\
\000\000\062\000\052\000\052\000\062\000\052\000\062\000\055\000\
\062\000\052\000\000\000\055\000\000\000\055\000\059\000\059\000\
\055\000\059\000\055\000\052\000\055\000\059\000\000\000\052\000\
\000\000\052\000\000\000\000\000\052\000\000\000\052\000\059\000\
\000\000\034\000\000\000\059\000\035\000\059\000\000\000\036\000\
\059\000\037\000\059\000\000\000\121\000\000\000\000\000\000\000\
\072\000\000\000\000\000\039\000\040\000\041\000\042\000\034\000\
\000\000\000\000\035\000\000\000\000\000\036\000\000\000\037\000\
\000\000\000\000\000\000\000\000\000\000\000\000\038\000\000\000\
\000\000\039\000\040\000\041\000\042\000\034\000\000\000\000\000\
\035\000\000\000\000\000\036\000\000\000\037\000\000\000\000\000\
\000\000\000\000\000\000\000\000\072\000\000\000\000\000\039\000\
\040\000\041\000\042\000\075\000\000\000\000\000\035\000\000\000\
\000\000\036\000\000\000\037\000\000\000\000\000\000\000\000\000\
\000\000\000\000\072\000\000\000\000\000\039\000\040\000\041\000\
\042\000\034\000\000\000\000\000\035\000\000\000\000\000\036\000\
\000\000\037\000\000\000\000\000\000\000\000\000\000\000\000\000\
\099\000\000\000\000\000\039\000\040\000\041\000\042\000"

let yycheck = "\001\000\
\003\001\007\000\022\001\005\000\006\000\001\000\012\001\102\000\
\012\001\011\000\030\001\013\000\033\001\015\000\016\000\035\001\
\111\000\026\001\036\001\011\001\041\001\013\001\014\001\026\001\
\033\001\031\000\121\000\033\001\034\000\033\001\036\000\030\001\
\127\000\128\000\022\001\022\001\035\001\029\001\026\001\026\001\
\036\001\043\000\021\001\138\000\036\001\037\001\048\000\039\001\
\040\001\041\001\042\001\032\001\021\001\148\000\056\000\033\001\
\058\000\059\000\005\001\006\001\036\001\008\001\033\001\026\001\
\036\001\012\001\012\001\025\001\070\000\075\000\036\001\036\001\
\022\001\032\001\036\001\022\001\078\000\079\000\026\001\026\001\
\030\001\028\001\084\000\085\000\031\001\035\001\033\001\022\001\
\094\000\031\001\028\001\097\000\098\000\025\001\031\001\030\001\
\001\001\002\001\030\001\004\001\035\001\103\000\007\001\035\001\
\009\001\032\001\011\001\022\001\013\001\014\001\025\001\026\001\
\118\000\028\001\116\000\030\001\021\001\036\001\023\001\030\001\
\022\001\028\001\027\001\012\001\029\001\033\001\030\001\030\001\
\025\001\131\000\065\000\036\001\032\001\038\001\039\001\040\001\
\041\001\042\001\033\001\033\001\142\000\092\000\144\000\145\000\
\004\001\005\001\006\001\007\001\008\001\009\001\031\000\011\001\
\012\001\013\001\014\001\116\000\255\255\255\255\255\255\255\255\
\255\255\021\001\022\001\255\255\255\255\025\001\026\001\027\001\
\028\001\029\001\255\255\031\001\255\255\033\001\255\255\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\004\001\
\005\001\006\001\007\001\008\001\009\001\255\255\011\001\012\001\
\013\001\014\001\255\255\255\255\255\255\255\255\255\255\255\255\
\021\001\022\001\255\255\255\255\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\255\255\033\001\255\255\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\004\001\255\255\
\255\255\007\001\255\255\009\001\255\255\011\001\255\255\013\001\
\014\001\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\022\001\255\255\255\255\025\001\026\001\027\001\255\255\029\001\
\255\255\255\255\255\255\255\255\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\004\001\255\255\255\255\
\007\001\255\255\009\001\255\255\011\001\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\021\001\255\255\
\255\255\255\255\025\001\255\255\027\001\255\255\029\001\255\255\
\255\255\255\255\033\001\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\004\001\005\001\255\255\007\001\
\255\255\009\001\255\255\011\001\255\255\013\001\014\001\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\255\255\255\255\
\255\255\025\001\255\255\027\001\255\255\029\001\255\255\255\255\
\255\255\255\255\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\004\001\255\255\255\255\007\001\008\001\
\009\001\255\255\011\001\255\255\013\001\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\021\001\255\255\255\255\255\255\
\025\001\255\255\027\001\255\255\029\001\255\255\255\255\255\255\
\255\255\255\255\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\004\001\255\255\255\255\007\001\255\255\009\001\
\255\255\011\001\255\255\013\001\014\001\255\255\255\255\255\255\
\255\255\255\255\255\255\021\001\255\255\255\255\255\255\025\001\
\255\255\027\001\028\001\029\001\255\255\255\255\255\255\255\255\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\004\001\255\255\255\255\007\001\255\255\009\001\255\255\
\011\001\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\021\001\255\255\255\255\255\255\025\001\026\001\
\027\001\255\255\029\001\255\255\255\255\255\255\255\255\255\255\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\004\001\255\255\006\001\007\001\255\255\009\001\255\255\011\001\
\255\255\013\001\014\001\255\255\255\255\255\255\255\255\255\255\
\255\255\021\001\255\255\255\255\255\255\025\001\255\255\027\001\
\255\255\029\001\255\255\255\255\255\255\255\255\255\255\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\004\001\
\255\255\255\255\007\001\255\255\009\001\255\255\011\001\255\255\
\013\001\014\001\255\255\255\255\255\255\255\255\255\255\255\255\
\021\001\022\001\255\255\255\255\025\001\255\255\027\001\255\255\
\029\001\255\255\255\255\255\255\255\255\255\255\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\004\001\255\255\
\255\255\007\001\255\255\009\001\255\255\011\001\255\255\013\001\
\014\001\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\022\001\255\255\255\255\025\001\255\255\027\001\255\255\029\001\
\255\255\255\255\255\255\255\255\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\004\001\255\255\255\255\
\007\001\255\255\009\001\255\255\011\001\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\021\001\255\255\
\255\255\255\255\025\001\255\255\027\001\255\255\029\001\255\255\
\255\255\255\255\255\255\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\004\001\255\255\255\255\007\001\
\255\255\009\001\255\255\011\001\255\255\013\001\014\001\016\001\
\017\001\018\001\019\001\020\001\021\001\021\001\255\255\255\255\
\255\255\025\001\027\001\027\001\255\255\029\001\255\255\255\255\
\255\255\255\255\255\255\036\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\004\001\255\255\255\255\007\001\255\255\
\009\001\255\255\011\001\255\255\013\001\014\001\255\255\255\255\
\255\255\255\255\036\001\037\001\021\001\039\001\040\001\041\001\
\042\001\255\255\027\001\255\255\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\255\255\038\001\039\001\040\001\
\041\001\042\001\004\001\005\001\006\001\007\001\008\001\009\001\
\255\255\255\255\012\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\021\001\022\001\255\255\255\255\025\001\
\026\001\027\001\028\001\255\255\255\255\031\001\255\255\033\001\
\255\255\035\001\255\255\255\255\038\001\004\001\005\001\006\001\
\007\001\008\001\009\001\255\255\255\255\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\021\001\022\001\
\255\255\255\255\025\001\026\001\027\001\028\001\005\001\006\001\
\031\001\008\001\033\001\255\255\035\001\012\001\255\255\038\001\
\255\255\004\001\005\001\006\001\255\255\008\001\009\001\022\001\
\255\255\012\001\025\001\026\001\255\255\028\001\255\255\255\255\
\031\001\255\255\033\001\022\001\035\001\255\255\037\001\026\001\
\255\255\028\001\255\255\255\255\031\001\255\255\033\001\255\255\
\035\001\004\001\005\001\006\001\255\255\008\001\009\001\255\255\
\255\255\012\001\255\255\255\255\255\255\004\001\005\001\006\001\
\255\255\008\001\009\001\022\001\255\255\012\001\255\255\026\001\
\255\255\028\001\005\001\006\001\031\001\008\001\033\001\022\001\
\035\001\012\001\255\255\026\001\255\255\028\001\005\001\006\001\
\031\001\008\001\033\001\022\001\035\001\012\001\255\255\026\001\
\255\255\028\001\005\001\006\001\031\001\008\001\033\001\022\001\
\035\001\012\001\255\255\026\001\255\255\028\001\005\001\006\001\
\031\001\008\001\033\001\022\001\035\001\012\001\255\255\026\001\
\255\255\028\001\005\001\006\001\031\001\008\001\033\001\022\001\
\035\001\012\001\255\255\026\001\255\255\028\001\005\001\006\001\
\031\001\008\001\033\001\022\001\035\001\012\001\255\255\026\001\
\255\255\028\001\255\255\255\255\031\001\255\255\033\001\022\001\
\255\255\021\001\255\255\026\001\024\001\028\001\255\255\027\001\
\031\001\029\001\033\001\255\255\032\001\255\255\255\255\255\255\
\036\001\255\255\255\255\039\001\040\001\041\001\042\001\021\001\
\255\255\255\255\024\001\255\255\255\255\027\001\255\255\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\036\001\255\255\
\255\255\039\001\040\001\041\001\042\001\021\001\255\255\255\255\
\024\001\255\255\255\255\027\001\255\255\029\001\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\255\255\255\255\039\001\
\040\001\041\001\042\001\021\001\255\255\255\255\024\001\255\255\
\255\255\027\001\255\255\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\036\001\255\255\255\255\039\001\040\001\041\001\
\042\001\021\001\255\255\255\255\024\001\255\255\255\255\027\001\
\255\255\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\036\001\255\255\255\255\039\001\040\001\041\001\042\001"

let yynames_const = "\
  NAME\000\
  TYPE\000\
  WHERE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  MATCH\000\
  WITH\000\
  LET\000\
  REC\000\
  FUN\000\
  IN\000\
  FRESH\000\
  SWAP\000\
  LIST\000\
  INT_T\000\
  REAL_T\000\
  BOOL_T\000\
  STRING_T\000\
  UNIT_T\000\
  L_PAREN\000\
  R_PAREN\000\
  HASH\000\
  DONT_CARE\000\
  EQUAL\000\
  COMMA\000\
  DBL_LT\000\
  DBL_GT\000\
  UNIT\000\
  ARROW\000\
  BAR\000\
  COLON\000\
  SEMI\000\
  DBL_SEMI\000\
  STAR\000\
  "

let yynames_block = "\
  ID\000\
  BIN_OP\000\
  UN_OP\000\
  INT\000\
  REAL\000\
  STRING\000\
  BOOL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'user_types) in
    Obj.repr(
# 67 "parser.mly"
                    ( (atoms, _1, []) )
# 531 "parser.ml"
               : ((string, int) Hashtbl.t) * ((string, AbSyn.typ) Hashtbl.t) * AbSyn.exp list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'top_let) in
    Obj.repr(
# 68 "parser.mly"
                 ( (atoms, types, [_1]) )
# 538 "parser.ml"
               : ((string, int) Hashtbl.t) * ((string, AbSyn.typ) Hashtbl.t) * AbSyn.exp list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 69 "parser.mly"
             ( (atoms, types, [_1]) )
# 545 "parser.ml"
               : ((string, int) Hashtbl.t) * ((string, AbSyn.typ) Hashtbl.t) * AbSyn.exp list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'directive) in
    Obj.repr(
# 70 "parser.mly"
                   ( (atoms, types, [_1]) )
# 552 "parser.ml"
               : ((string, int) Hashtbl.t) * ((string, AbSyn.typ) Hashtbl.t) * AbSyn.exp list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'nty) in
    Obj.repr(
# 74 "parser.mly"
             ( (if !print_info then printf "\n" else ()); types )
# 559 "parser.ml"
               : 'user_types))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dty) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ctor_list) in
    Obj.repr(
# 75 "parser.mly"
                       ( (if !print_info then printf "type %s = %s\n" _2 _3 else ()); cur_types := []; types )
# 567 "parser.ml"
               : 'user_types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 79 "parser.mly"
       (
      if Hashtbl.mem atoms _1 then
        (parse_error ("Re-declaration of name type: "^_1); raise Parse_error)
      else
        ((if !print_info then printf "name %s" _1 else ());
        Hashtbl.add atoms _1 0;
        Hashtbl.add types _1 (NameT _1))
    )
# 581 "parser.ml"
               : 'nty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'nty) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 87 "parser.mly"
                 (
      if Hashtbl.mem atoms _3 then
        (parse_error ("Re-declaration of name type: "^_3); raise Parse_error)
      else
        ((if !print_info then printf ", %s" _3 else ());
        Hashtbl.add atoms _3 0;
        Hashtbl.add types _3 (NameT _3))
    )
# 596 "parser.ml"
               : 'nty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 98 "parser.mly"
             (
      Hashtbl.add types _1 (DataT _1);
      cur_types := (_1 :: !cur_types);
      _1
    )
# 607 "parser.ml"
               : 'dty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dty) in
    Obj.repr(
# 103 "parser.mly"
                 (
      Hashtbl.add types _1 (DataT _1);
      cur_types := (_1 :: !cur_types);
      (_1 ^ ", " ^ _3)
    )
# 619 "parser.ml"
               : 'dty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 111 "parser.mly"
                       (
      (* Check that type_name is a function type to one of the just-defined types *)
      (* TODO Do we want to remove ctors for data type on error? *)
      (match _3 with
      | FuncT(t1, DataT(s)) ->
          if List.mem s !cur_types then ()
          else
            (parse_error ("Got "^s^" but expected "^(typ_opts "one of ")^" in constructor "^_1);
            cur_types := [];
            raise Parse_error)
      | _ ->
          (parse_error ("Got "^(string_of_typ _3)^" but expected "^(typ_opts "α -> β where β ∈ ")^
            " in constructor "^_1);
          cur_types := [];
          raise Parse_error));
      Hashtbl.add types _1 (CtorT _3);
      _1 ^ " : " ^ (string_of_typ _3)
    )
# 644 "parser.ml"
               : 'ctor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ctor) in
    Obj.repr(
# 132 "parser.mly"
         ( "\n  " ^ _1 )
# 651 "parser.ml"
               : 'ctor_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ctor_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ctor) in
    Obj.repr(
# 133 "parser.mly"
                         ( _1 ^ ",\n  " ^ _3 )
# 659 "parser.ml"
               : 'ctor_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "parser.mly"
           ( IntT )
# 665 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 138 "parser.mly"
           ( RealT )
# 671 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 139 "parser.mly"
           ( BoolT )
# 677 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "parser.mly"
             ( StringT )
# 683 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 141 "parser.mly"
       (
      try let t = Hashtbl.find types _1 in t with
      Not_found -> parse_error ("Undefined identifier: "^_1); raise Parse_error
    )
# 693 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 145 "parser.mly"
                               (
      try let NameT(s) = Hashtbl.find types _2 in NameAbT(NameT(s), _4) with
      | Not_found ->
          parse_error ("Undefined identifier: "^_2); raise Parse_error
      | Match_failure _ ->
          parse_error ("Expected name type in name abstraction");
          raise Parse_error
    )
# 708 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "parser.mly"
           ( UnitT )
# 714 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 154 "parser.mly"
                             ( ProdT(_1, _3) )
# 722 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 155 "parser.mly"
                              ( FuncT(_1, _3) )
# 730 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'type_name) in
    Obj.repr(
# 156 "parser.mly"
                              ( _2 )
# 737 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'type_name) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'type_name) in
    Obj.repr(
# 160 "parser.mly"
                                                                (
      Hashtbl.add types _1 (FuncT(_5, _8));
      (_1, _3, _5, _8)
    )
# 750 "parser.ml"
               : 'rec_func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 167 "parser.mly"
                      ( ValBind(_1, _3) )
# 758 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'rec_func) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 168 "parser.mly"
                 ( let (a, b, c, d) = _1 in RecF(RecFunc(a, b, c, d, _2, [])) )
# 766 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    Obj.repr(
# 172 "parser.mly"
              ( DontCareP )
# 772 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 173 "parser.mly"
       ( IdP(_1) )
# 779 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 174 "parser.mly"
        ( IntP(_1) )
# 786 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 175 "parser.mly"
         ( RealP(_1) )
# 793 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 176 "parser.mly"
         ( BoolP(_1) )
# 800 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 177 "parser.mly"
           ( StringP(_1) )
# 807 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 178 "parser.mly"
               ( CtorP(_1, _2) )
# 815 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 179 "parser.mly"
                                  ( NameAbsP(_2, _4) )
# 823 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 180 "parser.mly"
         ( UnitP )
# 829 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 181 "parser.mly"
                                          ( ProdP(_2, _4) )
# 837 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 182 "parser.mly"
                            ( _2 )
# 844 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sub_exp) in
    Obj.repr(
# 186 "parser.mly"
            ( _1 )
# 851 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'sub_exp) in
    Obj.repr(
# 187 "parser.mly"
                                 (
      (If(_2, _4, _6), [], get_pos 1)
    )
# 862 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 193 "parser.mly"
       ( (Id _1, [], get_pos 1) )
# 869 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 194 "parser.mly"
           (
      try
        let t = Hashtbl.find types _1 in
        (match t with
        | CtorT _ -> (Ctor(_1, _2), [], get_pos 1)
        | _ -> (App((Id(_1), [], get_pos 1), _2), [], get_pos 1))
      with
      | Not_found -> (App((Id(_1), [], get_pos 1), _2), [], get_pos 1)
    )
# 885 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 203 "parser.mly"
                  ( (BinaryOp(_1, Eq, _3), [], get_pos 1) )
# 893 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 204 "parser.mly"
        ( (IntLiteral(_1), [], get_pos 1) )
# 900 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 205 "parser.mly"
         ( (RealLiteral(_1), [], get_pos 1) )
# 907 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 206 "parser.mly"
         ( (BoolLiteral(_1), [], get_pos 1) )
# 914 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 207 "parser.mly"
           ( (StringLiteral(_1), [], get_pos 1) )
# 921 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 208 "parser.mly"
                   ( (Fresh _3, [], get_pos 1) )
# 928 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 209 "parser.mly"
                                              (
      (Swap(_3, _5, _8), [], get_pos 1)
    )
# 939 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 212 "parser.mly"
                          (
      (NameAb(_2, _4), [], get_pos 1)
    )
# 949 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 215 "parser.mly"
         ( (Unit, [], get_pos 1) )
# 955 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 216 "parser.mly"
                                  (
      (Pair(_2, _4), [], get_pos 1)
    )
# 965 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 219 "parser.mly"
            ( (App(_1, _2), [], get_pos 1) )
# 973 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'branch) in
    Obj.repr(
# 220 "parser.mly"
                          ( (Match(_2, _4), [], get_pos 1) )
# 981 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'dec) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 221 "parser.mly"
                   ( (Let(_2, _4), [], get_pos 1) )
# 989 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'type_name) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 222 "parser.mly"
                                                     (
      (Lambda(_3, _5, _8, []), [], get_pos 1)
    )
# 1000 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : AbSyn.un_op) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 225 "parser.mly"
              ( (UnaryOp(_1, _2), [], get_pos 1) )
# 1008 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 226 "parser.mly"
                        ( _2 )
# 1015 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 228 "parser.mly"
                 ( (BinaryOp(_1, Mult, _3), [], get_pos 1) )
# 1023 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : AbSyn.bin_op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 229 "parser.mly"
                   ( (BinaryOp(_1, _2, _3), [], get_pos 1) )
# 1032 "parser.ml"
               : 'sub_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 233 "parser.mly"
            ( (TopLet(_2, get_pos 2), [], get_pos 1) )
# 1039 "parser.ml"
               : 'top_let))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 237 "parser.mly"
                          ( [(_2, _4)] )
# 1047 "parser.ml"
               : 'branch))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'branch) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 238 "parser.mly"
                                 ( _1 @ [_3, _5] (* TODO consider using a different data structure to avoid costly appends *) )
# 1056 "parser.ml"
               : 'branch))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 242 "parser.mly"
            (
      match _2 with
      | "quit" -> (Directive(Quit, []), [], get_pos 1)
      | "use" -> (Directive(Use, []), [], get_pos 1)
      | _ -> (parse_error ("Unrecognised directive '"^_2^"'"); raise Parse_error);
    )
# 1068 "parser.ml"
               : 'directive))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'directive) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 248 "parser.mly"
                     (
      let (Directive(d, xs), pi, p) = _1 in (Directive(d, _2::xs), pi, p)
    )
# 1078 "parser.ml"
               : 'directive))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : ((string, int) Hashtbl.t) * ((string, AbSyn.typ) Hashtbl.t) * AbSyn.exp list)
;;
# 253 "parser.mly"


# 1106 "parser.ml"
