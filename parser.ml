type token =
  | NAME
  | TYPE
  | WHERE
  | IF
  | THEN
  | ELSE
  | MATCH
  | WITH
  | LET
  | REC
  | FUN
  | IN
  | FRESH
  | SWAP
  | INT_T
  | REAL_T
  | BOOL_T
  | STRING_T
  | UNIT_T
  | L_PAREN
  | R_PAREN
  | DONT_CARE
  | EQUAL
  | LT
  | GT
  | COMMA
  | DBL_LT
  | DBL_GT
  | UNIT
  | ARROW
  | BAR
  | COLON
  | SEMI
  | DBL_SEMI
  | STAR
  | ID of (string)
  | BIN_OP of (AbSyn.bin_op)
  | UN_OP of (AbSyn.un_op)
  | INT of (int)
  | REAL of (float)
  | STRING of (string)
  | BOOL of (bool)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Printf
  open Lexing
  open AbSyn

  let get_pos n =
    let p = Parsing.rhs_start_pos n in
    (p.pos_lnum, p.pos_cnum - p.pos_bol);;

  let parse_error s =
    let pos = Parsing.symbol_start_pos () in
    printf "%s [line %d, col %d]\n" s pos.pos_lnum (pos.pos_cnum - pos.pos_bol);
    flush stdout;;

  let types = Hashtbl.create 50;; (* key: type name, val: actual type *)

  let debug = true;;
# 65 "parser.ml"
let yytransl_const = [|
  257 (* NAME *);
  258 (* TYPE *);
  259 (* WHERE *);
  260 (* IF *);
  261 (* THEN *);
  262 (* ELSE *);
  263 (* MATCH *);
  264 (* WITH *);
  265 (* LET *);
  266 (* REC *);
  267 (* FUN *);
  268 (* IN *);
  269 (* FRESH *);
  270 (* SWAP *);
  271 (* INT_T *);
  272 (* REAL_T *);
  273 (* BOOL_T *);
  274 (* STRING_T *);
  275 (* UNIT_T *);
  276 (* L_PAREN *);
  277 (* R_PAREN *);
  278 (* DONT_CARE *);
  279 (* EQUAL *);
  280 (* LT *);
  281 (* GT *);
  282 (* COMMA *);
  283 (* DBL_LT *);
  284 (* DBL_GT *);
  285 (* UNIT *);
  286 (* ARROW *);
  287 (* BAR *);
  288 (* COLON *);
  289 (* SEMI *);
  290 (* DBL_SEMI *);
  291 (* STAR *);
    0|]

let yytransl_block = [|
  292 (* ID *);
  293 (* BIN_OP *);
  294 (* UN_OP *);
  295 (* INT *);
  296 (* REAL *);
  297 (* STRING *);
  298 (* BOOL *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\002\000\002\000\004\000\004\000\005\000\
\005\000\007\000\006\000\006\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\009\000\010\000\010\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\012\000\012\000\000\000"

let yylen = "\002\000\
\002\000\002\000\002\000\002\000\003\000\001\000\003\000\002\000\
\003\000\003\000\001\000\003\000\001\000\001\000\001\000\001\000\
\001\000\004\000\001\000\003\000\003\000\009\000\003\000\002\000\
\001\000\001\000\002\000\004\000\001\000\005\000\003\000\001\000\
\002\000\001\000\001\000\001\000\001\000\003\000\008\000\008\000\
\004\000\001\000\005\000\002\000\004\000\002\000\004\000\003\000\
\003\000\008\000\002\000\003\000\004\000\005\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\000\000\000\000\
\034\000\035\000\037\000\036\000\055\000\000\000\000\000\003\000\
\006\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\
\000\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\002\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\027\000\000\000\
\000\000\000\000\000\000\038\000\000\000\052\000\000\000\000\000\
\000\000\000\000\007\000\009\000\000\000\000\000\000\000\000\000\
\000\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\013\000\014\000\015\000\016\000\019\000\
\000\000\017\000\000\000\012\000\000\000\000\000\000\000\000\000\
\028\000\000\000\000\000\000\000\043\000\000\000\000\000\000\000\
\000\000\000\000\000\000\030\000\000\000\000\000\000\000\000\000\
\021\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000"

let yydgoto = "\002\000\
\021\000\022\000\050\000\026\000\028\000\055\000\056\000\099\000\
\036\000\037\000\063\000\081\000"

let yysindex = "\008\000\
\078\255\000\000\078\255\236\254\242\254\158\001\158\001\032\255\
\003\255\000\255\013\255\158\001\158\001\000\000\158\001\158\001\
\000\000\000\000\000\000\000\000\000\000\012\255\241\255\000\000\
\000\000\040\255\001\255\039\255\024\000\063\000\075\255\000\000\
\075\255\000\000\079\255\158\001\051\255\026\255\045\255\047\255\
\158\001\202\255\102\000\080\001\101\002\000\000\000\000\158\001\
\158\001\080\001\050\255\000\000\242\254\052\255\064\255\000\000\
\158\001\062\255\075\255\243\254\066\255\158\255\000\000\080\001\
\158\001\158\001\071\255\000\000\141\000\000\000\158\001\158\001\
\119\001\080\001\000\000\000\000\002\255\039\255\180\000\075\255\
\081\255\000\000\075\255\075\255\014\255\223\255\101\002\002\255\
\158\001\219\000\101\002\000\000\000\000\000\000\000\000\000\000\
\073\255\000\000\027\255\000\000\158\001\080\255\075\255\100\255\
\000\000\002\255\007\255\002\001\000\000\095\255\002\255\002\255\
\041\001\158\001\110\255\000\000\023\255\112\255\134\255\002\255\
\000\000\000\000\158\001\119\001\158\001\093\255\158\001\158\001\
\000\000\119\001\119\001\002\255\119\001\223\255\037\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\115\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\126\255\000\000\124\255\000\000\000\000\000\000\
\000\000\000\000\000\000\003\003\034\002\000\000\000\000\000\000\
\000\000\027\003\000\000\000\000\000\000\000\000\121\255\000\000\
\000\000\000\000\113\255\000\000\000\000\000\000\000\000\051\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\139\002\075\003\000\000\000\000\000\000\000\000\000\000\000\000\
\163\255\000\000\000\000\000\000\048\255\197\001\066\002\000\000\
\000\000\000\000\098\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\233\254\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\163\002\000\000\000\000\000\000\000\000\
\000\000\187\002\211\002\000\000\235\002\232\001\000\000\000\000"

let yygindex = "\000\000\
\153\000\000\000\255\255\000\000\105\000\000\000\095\000\175\255\
\000\000\000\000\249\255\000\000"

let yytablesize = 1132
let yytable = "\023\000\
\038\000\023\000\010\000\052\000\029\000\030\000\107\000\082\000\
\001\000\010\000\042\000\043\000\083\000\044\000\045\000\025\000\
\092\000\093\000\094\000\095\000\096\000\027\000\039\000\060\000\
\117\000\061\000\053\000\118\000\097\000\121\000\122\000\040\000\
\041\000\031\000\064\000\032\000\111\000\098\000\129\000\069\000\
\033\000\112\000\034\000\126\000\046\000\106\000\073\000\074\000\
\066\000\059\000\135\000\031\000\111\000\032\000\060\000\079\000\
\111\000\112\000\033\000\136\000\034\000\112\000\065\000\086\000\
\087\000\051\000\111\000\035\000\026\000\090\000\091\000\112\000\
\102\000\026\000\054\000\104\000\105\000\003\000\004\000\005\000\
\067\000\006\000\068\000\077\000\007\000\075\000\008\000\108\000\
\009\000\078\000\010\000\011\000\080\000\084\000\031\000\115\000\
\032\000\012\000\062\000\113\000\032\000\033\000\088\000\034\000\
\013\000\033\000\014\000\034\000\110\000\114\000\059\000\103\000\
\124\000\015\000\059\000\016\000\017\000\018\000\019\000\020\000\
\116\000\130\000\120\000\131\000\132\000\133\000\134\000\046\000\
\046\000\046\000\046\000\046\000\046\000\026\000\046\000\026\000\
\046\000\046\000\026\000\125\000\026\000\127\000\026\000\046\000\
\046\000\128\000\046\000\004\000\026\000\046\000\046\000\046\000\
\046\000\005\000\046\000\024\000\046\000\076\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\045\000\045\000\
\045\000\045\000\045\000\045\000\100\000\045\000\045\000\045\000\
\045\000\031\000\000\000\032\000\000\000\000\000\045\000\045\000\
\033\000\045\000\034\000\000\000\045\000\045\000\045\000\045\000\
\000\000\085\000\000\000\045\000\000\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\006\000\000\000\000\000\
\007\000\000\000\008\000\000\000\009\000\000\000\010\000\011\000\
\000\000\000\000\000\000\000\000\000\000\012\000\070\000\000\000\
\000\000\000\000\000\000\071\000\013\000\000\000\014\000\000\000\
\000\000\000\000\000\000\000\000\048\000\015\000\049\000\016\000\
\017\000\018\000\019\000\020\000\006\000\000\000\000\000\007\000\
\000\000\008\000\000\000\009\000\000\000\010\000\011\000\000\000\
\000\000\000\000\015\000\049\000\012\000\017\000\018\000\019\000\
\020\000\000\000\000\000\013\000\000\000\014\000\000\000\000\000\
\000\000\047\000\000\000\048\000\015\000\049\000\016\000\017\000\
\018\000\019\000\020\000\006\000\000\000\000\000\007\000\000\000\
\008\000\000\000\009\000\000\000\010\000\011\000\000\000\000\000\
\000\000\000\000\000\000\012\000\000\000\000\000\057\000\000\000\
\000\000\000\000\013\000\000\000\014\000\000\000\000\000\000\000\
\000\000\000\000\048\000\015\000\049\000\016\000\017\000\018\000\
\019\000\020\000\006\000\000\000\000\000\007\000\058\000\008\000\
\000\000\009\000\000\000\010\000\011\000\000\000\000\000\000\000\
\000\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\000\000\000\014\000\000\000\000\000\000\000\000\000\
\000\000\048\000\015\000\049\000\016\000\017\000\018\000\019\000\
\020\000\006\000\000\000\000\000\007\000\000\000\008\000\000\000\
\009\000\000\000\010\000\011\000\000\000\000\000\000\000\000\000\
\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\072\000\014\000\000\000\000\000\000\000\000\000\000\000\
\048\000\015\000\049\000\016\000\017\000\018\000\019\000\020\000\
\006\000\000\000\000\000\007\000\000\000\008\000\000\000\009\000\
\000\000\010\000\011\000\000\000\000\000\000\000\000\000\000\000\
\012\000\000\000\000\000\000\000\000\000\000\000\089\000\013\000\
\000\000\014\000\000\000\000\000\000\000\000\000\000\000\048\000\
\015\000\049\000\016\000\017\000\018\000\019\000\020\000\006\000\
\101\000\000\000\007\000\000\000\008\000\000\000\009\000\000\000\
\010\000\011\000\000\000\000\000\000\000\000\000\000\000\012\000\
\000\000\000\000\000\000\000\000\000\000\000\000\013\000\000\000\
\014\000\000\000\000\000\000\000\000\000\000\000\048\000\015\000\
\049\000\016\000\017\000\018\000\019\000\020\000\006\000\000\000\
\000\000\007\000\000\000\008\000\000\000\009\000\000\000\010\000\
\011\000\000\000\000\000\000\000\000\000\000\000\012\000\109\000\
\000\000\000\000\000\000\000\000\000\000\013\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\048\000\015\000\049\000\
\016\000\017\000\018\000\019\000\020\000\006\000\000\000\000\000\
\007\000\000\000\008\000\000\000\009\000\000\000\010\000\011\000\
\000\000\000\000\000\000\000\000\000\000\012\000\119\000\000\000\
\000\000\000\000\000\000\000\000\013\000\000\000\014\000\000\000\
\000\000\000\000\000\000\000\000\048\000\015\000\049\000\016\000\
\017\000\018\000\019\000\020\000\006\000\000\000\123\000\007\000\
\000\000\008\000\000\000\009\000\000\000\010\000\011\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\013\000\000\000\014\000\000\000\000\000\
\000\000\000\000\000\000\048\000\015\000\049\000\016\000\017\000\
\018\000\019\000\020\000\006\000\000\000\000\000\007\000\000\000\
\008\000\000\000\009\000\000\000\010\000\011\000\000\000\000\000\
\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\
\000\000\000\000\013\000\000\000\014\000\000\000\000\000\000\000\
\000\000\000\000\048\000\015\000\049\000\016\000\017\000\018\000\
\019\000\020\000\006\000\000\000\000\000\007\000\000\000\008\000\
\000\000\009\000\000\000\010\000\011\000\000\000\000\000\000\000\
\000\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\000\000\000\014\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\049\000\016\000\017\000\018\000\019\000\
\020\000\006\000\000\000\000\000\007\000\000\000\008\000\000\000\
\009\000\000\000\010\000\011\000\000\000\000\000\000\000\000\000\
\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\000\000\014\000\000\000\000\000\000\000\000\000\000\000\
\000\000\015\000\000\000\016\000\017\000\018\000\019\000\020\000\
\047\000\047\000\047\000\047\000\047\000\047\000\000\000\000\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\047\000\047\000\000\000\047\000\000\000\000\000\047\000\047\000\
\047\000\000\000\000\000\047\000\000\000\047\000\000\000\047\000\
\000\000\000\000\047\000\040\000\040\000\040\000\040\000\040\000\
\040\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\040\000\040\000\000\000\040\000\000\000\
\000\000\040\000\040\000\040\000\032\000\032\000\040\000\032\000\
\040\000\000\000\040\000\032\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\000\000\000\032\000\000\000\
\000\000\032\000\000\000\032\000\000\000\000\000\032\000\000\000\
\032\000\000\000\032\000\000\000\032\000\051\000\051\000\051\000\
\000\000\051\000\051\000\000\000\000\000\051\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\051\000\000\000\
\051\000\000\000\000\000\051\000\000\000\051\000\000\000\000\000\
\051\000\000\000\051\000\000\000\051\000\023\000\023\000\023\000\
\000\000\023\000\023\000\000\000\000\000\023\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\000\000\000\
\023\000\000\000\000\000\023\000\000\000\023\000\000\000\000\000\
\023\000\000\000\023\000\000\000\023\000\041\000\041\000\041\000\
\000\000\041\000\041\000\000\000\000\000\041\000\000\000\009\000\
\000\000\010\000\011\000\000\000\000\000\000\000\041\000\000\000\
\041\000\000\000\000\000\041\000\000\000\041\000\000\000\000\000\
\041\000\014\000\041\000\000\000\041\000\000\000\000\000\000\000\
\015\000\049\000\000\000\017\000\018\000\019\000\020\000\049\000\
\049\000\000\000\049\000\000\000\000\000\000\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\000\000\049\000\000\000\000\000\049\000\000\000\049\000\053\000\
\053\000\049\000\053\000\049\000\000\000\049\000\053\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\053\000\
\000\000\053\000\000\000\000\000\053\000\000\000\053\000\039\000\
\039\000\053\000\039\000\053\000\000\000\053\000\039\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\000\000\039\000\000\000\000\000\039\000\000\000\039\000\054\000\
\054\000\039\000\054\000\039\000\000\000\039\000\054\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\
\000\000\054\000\000\000\000\000\054\000\000\000\054\000\050\000\
\050\000\054\000\050\000\054\000\000\000\054\000\050\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\050\000\
\000\000\050\000\000\000\000\000\050\000\000\000\050\000\033\000\
\033\000\050\000\033\000\050\000\000\000\050\000\033\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\000\000\033\000\000\000\000\000\033\000\000\000\033\000\044\000\
\044\000\033\000\044\000\033\000\000\000\000\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\000\000\044\000\000\000\000\000\044\000\000\000\044\000\024\000\
\024\000\044\000\024\000\044\000\000\000\000\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\
\000\000\024\000\000\000\000\000\024\000\000\000\024\000\048\000\
\048\000\024\000\048\000\024\000\000\000\000\000\048\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\000\000\048\000\000\000\000\000\048\000\000\000\048\000\000\000\
\000\000\048\000\000\000\048\000"

let yycheck = "\001\000\
\008\000\003\000\026\001\003\001\006\000\007\000\088\000\021\001\
\001\000\033\001\012\000\013\000\026\001\015\000\016\000\036\001\
\015\001\016\001\017\001\018\001\019\001\036\001\020\001\031\000\
\106\000\033\000\026\001\021\001\027\001\111\000\112\000\032\001\
\020\001\020\001\036\000\022\001\030\001\036\001\120\000\041\000\
\027\001\035\001\029\001\021\001\033\001\032\001\048\000\049\000\
\023\001\036\001\132\000\020\001\030\001\022\001\062\000\057\000\
\030\001\035\001\027\001\023\001\029\001\035\001\012\001\065\000\
\066\000\026\001\030\001\036\001\021\001\071\000\072\000\035\001\
\080\000\026\001\036\001\083\000\084\000\000\001\001\001\002\001\
\036\001\004\001\036\001\032\001\007\001\036\001\009\001\089\000\
\011\001\026\001\013\001\014\001\031\001\028\001\020\001\103\000\
\022\001\020\001\020\001\101\000\022\001\027\001\032\001\029\001\
\027\001\027\001\029\001\029\001\036\001\030\001\036\001\031\001\
\114\000\036\001\036\001\038\001\039\001\040\001\041\001\042\001\
\021\001\123\000\028\001\125\000\032\001\127\000\128\000\004\001\
\005\001\006\001\007\001\008\001\009\001\021\001\011\001\023\001\
\013\001\014\001\026\001\030\001\028\001\030\001\030\001\020\001\
\021\001\012\001\023\001\033\001\023\001\026\001\027\001\028\001\
\029\001\033\001\031\001\003\000\033\001\053\000\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\004\001\005\001\
\006\001\007\001\008\001\009\001\078\000\011\001\012\001\013\001\
\014\001\020\001\255\255\022\001\255\255\255\255\020\001\021\001\
\027\001\023\001\029\001\255\255\026\001\027\001\028\001\029\001\
\255\255\036\001\255\255\033\001\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\004\001\255\255\255\255\
\007\001\255\255\009\001\255\255\011\001\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\020\001\021\001\255\255\
\255\255\255\255\255\255\026\001\027\001\255\255\029\001\255\255\
\255\255\255\255\255\255\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\004\001\255\255\255\255\007\001\
\255\255\009\001\255\255\011\001\255\255\013\001\014\001\255\255\
\255\255\255\255\036\001\037\001\020\001\039\001\040\001\041\001\
\042\001\255\255\255\255\027\001\255\255\029\001\255\255\255\255\
\255\255\033\001\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\004\001\255\255\255\255\007\001\255\255\
\009\001\255\255\011\001\255\255\013\001\014\001\255\255\255\255\
\255\255\255\255\255\255\020\001\255\255\255\255\023\001\255\255\
\255\255\255\255\027\001\255\255\029\001\255\255\255\255\255\255\
\255\255\255\255\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\004\001\255\255\255\255\007\001\008\001\009\001\
\255\255\011\001\255\255\013\001\014\001\255\255\255\255\255\255\
\255\255\255\255\020\001\255\255\255\255\255\255\255\255\255\255\
\255\255\027\001\255\255\029\001\255\255\255\255\255\255\255\255\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\004\001\255\255\255\255\007\001\255\255\009\001\255\255\
\011\001\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001\028\001\029\001\255\255\255\255\255\255\255\255\255\255\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\004\001\255\255\255\255\007\001\255\255\009\001\255\255\011\001\
\255\255\013\001\014\001\255\255\255\255\255\255\255\255\255\255\
\020\001\255\255\255\255\255\255\255\255\255\255\026\001\027\001\
\255\255\029\001\255\255\255\255\255\255\255\255\255\255\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\004\001\
\005\001\255\255\007\001\255\255\009\001\255\255\011\001\255\255\
\013\001\014\001\255\255\255\255\255\255\255\255\255\255\020\001\
\255\255\255\255\255\255\255\255\255\255\255\255\027\001\255\255\
\029\001\255\255\255\255\255\255\255\255\255\255\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\004\001\255\255\
\255\255\007\001\255\255\009\001\255\255\011\001\255\255\013\001\
\014\001\255\255\255\255\255\255\255\255\255\255\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\027\001\255\255\029\001\
\255\255\255\255\255\255\255\255\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\004\001\255\255\255\255\
\007\001\255\255\009\001\255\255\011\001\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\020\001\021\001\255\255\
\255\255\255\255\255\255\255\255\027\001\255\255\029\001\255\255\
\255\255\255\255\255\255\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\004\001\255\255\006\001\007\001\
\255\255\009\001\255\255\011\001\255\255\013\001\014\001\255\255\
\255\255\255\255\255\255\255\255\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\027\001\255\255\029\001\255\255\255\255\
\255\255\255\255\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\004\001\255\255\255\255\007\001\255\255\
\009\001\255\255\011\001\255\255\013\001\014\001\255\255\255\255\
\255\255\255\255\255\255\020\001\255\255\255\255\255\255\255\255\
\255\255\255\255\027\001\255\255\029\001\255\255\255\255\255\255\
\255\255\255\255\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\004\001\255\255\255\255\007\001\255\255\009\001\
\255\255\011\001\255\255\013\001\014\001\255\255\255\255\255\255\
\255\255\255\255\020\001\255\255\255\255\255\255\255\255\255\255\
\255\255\027\001\255\255\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\004\001\255\255\255\255\007\001\255\255\009\001\255\255\
\011\001\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001\255\255\029\001\255\255\255\255\255\255\255\255\255\255\
\255\255\036\001\255\255\038\001\039\001\040\001\041\001\042\001\
\004\001\005\001\006\001\007\001\008\001\009\001\255\255\255\255\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\021\001\255\255\023\001\255\255\255\255\026\001\027\001\
\028\001\255\255\255\255\031\001\255\255\033\001\255\255\035\001\
\255\255\255\255\038\001\004\001\005\001\006\001\007\001\008\001\
\009\001\255\255\255\255\012\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\020\001\021\001\255\255\023\001\255\255\
\255\255\026\001\027\001\028\001\005\001\006\001\031\001\008\001\
\033\001\255\255\035\001\012\001\255\255\038\001\255\255\255\255\
\255\255\255\255\255\255\255\255\021\001\255\255\023\001\255\255\
\255\255\026\001\255\255\028\001\255\255\255\255\031\001\255\255\
\033\001\255\255\035\001\255\255\037\001\004\001\005\001\006\001\
\255\255\008\001\009\001\255\255\255\255\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\021\001\255\255\
\023\001\255\255\255\255\026\001\255\255\028\001\255\255\255\255\
\031\001\255\255\033\001\255\255\035\001\004\001\005\001\006\001\
\255\255\008\001\009\001\255\255\255\255\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\021\001\255\255\
\023\001\255\255\255\255\026\001\255\255\028\001\255\255\255\255\
\031\001\255\255\033\001\255\255\035\001\004\001\005\001\006\001\
\255\255\008\001\009\001\255\255\255\255\012\001\255\255\011\001\
\255\255\013\001\014\001\255\255\255\255\255\255\021\001\255\255\
\023\001\255\255\255\255\026\001\255\255\028\001\255\255\255\255\
\031\001\029\001\033\001\255\255\035\001\255\255\255\255\255\255\
\036\001\037\001\255\255\039\001\040\001\041\001\042\001\005\001\
\006\001\255\255\008\001\255\255\255\255\255\255\012\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\255\255\023\001\255\255\255\255\026\001\255\255\028\001\005\001\
\006\001\031\001\008\001\033\001\255\255\035\001\012\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\255\255\023\001\255\255\255\255\026\001\255\255\028\001\005\001\
\006\001\031\001\008\001\033\001\255\255\035\001\012\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\255\255\023\001\255\255\255\255\026\001\255\255\028\001\005\001\
\006\001\031\001\008\001\033\001\255\255\035\001\012\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\255\255\023\001\255\255\255\255\026\001\255\255\028\001\005\001\
\006\001\031\001\008\001\033\001\255\255\035\001\012\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\255\255\023\001\255\255\255\255\026\001\255\255\028\001\005\001\
\006\001\031\001\008\001\033\001\255\255\035\001\012\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\255\255\023\001\255\255\255\255\026\001\255\255\028\001\005\001\
\006\001\031\001\008\001\033\001\255\255\255\255\012\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\255\255\023\001\255\255\255\255\026\001\255\255\028\001\005\001\
\006\001\031\001\008\001\033\001\255\255\255\255\012\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\255\255\023\001\255\255\255\255\026\001\255\255\028\001\005\001\
\006\001\031\001\008\001\033\001\255\255\255\255\012\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\255\255\023\001\255\255\255\255\026\001\255\255\028\001\255\255\
\255\255\031\001\255\255\033\001"

let yynames_const = "\
  NAME\000\
  TYPE\000\
  WHERE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  MATCH\000\
  WITH\000\
  LET\000\
  REC\000\
  FUN\000\
  IN\000\
  FRESH\000\
  SWAP\000\
  INT_T\000\
  REAL_T\000\
  BOOL_T\000\
  STRING_T\000\
  UNIT_T\000\
  L_PAREN\000\
  R_PAREN\000\
  DONT_CARE\000\
  EQUAL\000\
  LT\000\
  GT\000\
  COMMA\000\
  DBL_LT\000\
  DBL_GT\000\
  UNIT\000\
  ARROW\000\
  BAR\000\
  COLON\000\
  SEMI\000\
  DBL_SEMI\000\
  STAR\000\
  "

let yynames_block = "\
  ID\000\
  BIN_OP\000\
  UN_OP\000\
  INT\000\
  REAL\000\
  STRING\000\
  BOOL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'user_types) in
    Obj.repr(
# 56 "parser.mly"
                    ( (_1, []) )
# 541 "parser.ml"
               : ((string, AbSyn.typ) Hashtbl.t) * AbSyn.exp list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 57 "parser.mly"
             ( (types, [_1]) )
# 548 "parser.ml"
               : ((string, AbSyn.typ) Hashtbl.t) * AbSyn.exp list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ((string, AbSyn.typ) Hashtbl.t) * AbSyn.exp list) in
    Obj.repr(
# 58 "parser.mly"
                  ( _2 )
# 555 "parser.ml"
               : ((string, AbSyn.typ) Hashtbl.t) * AbSyn.exp list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'nty) in
    Obj.repr(
# 62 "parser.mly"
             ( types )
# 562 "parser.ml"
               : 'user_types))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dty) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ctor_list) in
    Obj.repr(
# 63 "parser.mly"
                       ( types )
# 570 "parser.ml"
               : 'user_types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 67 "parser.mly"
       ( Hashtbl.add types _1 (NameT _1) )
# 577 "parser.ml"
               : 'nty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'nty) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 68 "parser.mly"
                 ( Hashtbl.add types _3 (NameT _3) )
# 585 "parser.ml"
               : 'nty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 72 "parser.mly"
             ( Hashtbl.add types _1 (DataT _1) )
# 592 "parser.ml"
               : 'dty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dty) in
    Obj.repr(
# 73 "parser.mly"
                 ( Hashtbl.add types _1 (DataT _1) )
# 600 "parser.ml"
               : 'dty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 77 "parser.mly"
                       ( Hashtbl.add types _1 (CtorT _3) )
# 608 "parser.ml"
               : 'ctor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ctor) in
    Obj.repr(
# 81 "parser.mly"
         ( )
# 615 "parser.ml"
               : 'ctor_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ctor_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ctor) in
    Obj.repr(
# 82 "parser.mly"
                         ( )
# 623 "parser.ml"
               : 'ctor_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
           ( IntT )
# 629 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
           ( RealT )
# 635 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
           ( BoolT )
# 641 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
             ( StringT )
# 647 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 90 "parser.mly"
       (
      try let t = Hashtbl.find types _1 in t with
      Not_found -> parse_error ("Undefined identifier: "^_1); raise Parse_error
    )
# 657 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 94 "parser.mly"
                               (
      try let NameT(s) = Hashtbl.find types _2 in NameAbT(NameT(s), _4) with
      | Not_found ->
          parse_error ("Undefined identifier: "^_2); raise Parse_error
      | Match_failure _ ->
          parse_error ("Expected name type in name abstraction");
          raise Parse_error
    )
# 672 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
           ( UnitT )
# 678 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 103 "parser.mly"
                             ( ProdT(_1, _3) )
# 686 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_name) in
    Obj.repr(
# 104 "parser.mly"
                              ( FuncT(_1, _3) )
# 694 "parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'type_name) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'type_name) in
    Obj.repr(
# 108 "parser.mly"
                                                                (
      Hashtbl.add types _1 (FuncT(_5, _8));
      (_1, _3, _5, _8)
    )
# 707 "parser.ml"
               : 'rec_func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 115 "parser.mly"
                      ( ValBind(_1, _3) )
# 715 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'rec_func) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 116 "parser.mly"
                 ( let (a, b, c, d) = _1 in RecFunc(a, b, c, d, _2) )
# 723 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "parser.mly"
              ( DontCareP )
# 729 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 121 "parser.mly"
       ( IdP(_1) )
# 736 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 122 "parser.mly"
               ( CtorP(_1, _2) )
# 744 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 123 "parser.mly"
                                  ( NameAbsP(_2, _4) )
# 752 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 124 "parser.mly"
         ( UnitP )
# 758 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 125 "parser.mly"
                                          ( ProdP(_2, _4) )
# 766 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 126 "parser.mly"
                            ( _2 )
# 773 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 130 "parser.mly"
       ( (Id _1, get_pos 1) )
# 780 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 131 "parser.mly"
           (
      try
        let t = Hashtbl.find types _1 in
        (match t with
        | CtorT _ -> (Ctor(_1, _2), get_pos 1)
        | FuncT _ -> (App((Id(_1), get_pos 1), _2), get_pos 1)
        | _ ->
            parse_error ("Cannot apply expression to non-function "^"type"^_1);
            raise Parse_error)
      with
      | Not_found -> (App((Id(_1), get_pos 1), _2), get_pos 1)
    )
# 799 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 143 "parser.mly"
        ( (IntLiteral(_1), get_pos 1) )
# 806 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 144 "parser.mly"
         ( (RealLiteral(_1), get_pos 1) )
# 813 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 145 "parser.mly"
         ( (BoolLiteral(_1), get_pos 1) )
# 820 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 146 "parser.mly"
           ( (StringLiteral(_1), get_pos 1) )
# 827 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 147 "parser.mly"
                   ( (Fresh _3, get_pos 1) )
# 834 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 148 "parser.mly"
                                       (
      (If(_2, _4, _6, _8), get_pos 1)
    )
# 846 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 151 "parser.mly"
                                              (
      (Swap(_3, _5, _8), get_pos 1)
    )
# 857 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 154 "parser.mly"
                          (
      (NameAb(_2, _4), get_pos 1)
    )
# 867 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
         ( (Unit, get_pos 1) )
# 873 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 158 "parser.mly"
                                  (
      (Pair(_2, _4), get_pos 1)
    )
# 883 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 161 "parser.mly"
            ( (App(_1, _2), get_pos 1) )
# 891 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'branch) in
    Obj.repr(
# 162 "parser.mly"
                          ( (Match(_2, _4), get_pos 1) )
# 899 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 163 "parser.mly"
            ( (TopLet(_2, get_pos 2), get_pos 1) )
# 906 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'dec) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 164 "parser.mly"
                   ( (Let(_2, _4), get_pos 1) )
# 914 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : AbSyn.bin_op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 165 "parser.mly"
                   ( (BinaryOp(_1, _2, _3), get_pos 1) )
# 923 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 166 "parser.mly"
                 ( (BinaryOp(_1, Mult, _3), get_pos 1) )
# 931 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'type_name) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 167 "parser.mly"
                                                     (
      (Lambda(_3, _5, _8), get_pos 1)
    )
# 942 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : AbSyn.un_op) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 170 "parser.mly"
              ( (UnaryOp(_1, _2), get_pos 1) )
# 950 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 171 "parser.mly"
                        ( _2 )
# 957 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 175 "parser.mly"
                          ( [(_2, _4)] )
# 965 "parser.ml"
               : 'branch))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'branch) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 176 "parser.mly"
                                 ( (_3, _5)::_1 )
# 974 "parser.ml"
               : 'branch))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : ((string, AbSyn.typ) Hashtbl.t) * AbSyn.exp list)
;;
# 180 "parser.mly"

# 1001 "parser.ml"
