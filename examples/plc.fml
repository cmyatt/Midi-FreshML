(* Midi Fresh-ML test program #1
 * Polymorphic Lambda Calculus with capture-avoiding substitution
 *)

name tyvar, var;

type typ, exp where
  Tyvar : tyvar -> typ,
  Fun : typ * typ -> typ,
  All : <<tyvar>>typ -> typ,
  Var : var -> exp,
  Lam : typ * <<var>>exp -> exp,
  App : exp * exp -> exp,
  Gen : <<tyvar>>exp -> exp,
  Spec : exp * typ -> exp;

let (x, y) = (fresh : tyvar, fresh : var);
let (w, z) = (fresh : tyvar, fresh : var);

let e = Lam(All <<x>>(Tyvar x), <<y>>(Var y));
let e' = Lam(All <<w>>(Tyvar w), <<z>>(Var z));

e = e';

(* Capture-avoiding substitution *)
(*
let subst = fun (x : var) -> fun (e : exp) ->
  let s(e' : exp) : exp =
    match e' with
    | Var y -> if x = y then e else e'
    | Lam(t, <<y>>z) -> Lam(t, <<y>>(s z))
    | App(y, z) -> App(s y, s z)
    | Gen(<<t>>y) -> Gen(<<t>>(s y))
    | Spec(y, t) -> Spec(s y, t)
  in s
  in subst;

let inc = fun(x : int) -> x in inc 5;

let x = 5 in
  let add = fun(pair : real * real) ->
    let (x, y) = pair in x+y in
      let z = add(3., 4.) in x+6;
*)
