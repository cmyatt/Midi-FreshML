(**********************************************************************************

  plc.fml

  Type checking and syntactic normalization for Polymorphic Lambda
  Calculus (PLC) in Midi-FreshML.

  Ported from Fresh OCaml example by A.M.Pitts.

  C.G.Myatt
  2014-02-03
 
**********************************************************************************)

name tyvar;                         (* type variables, a *)

type ty where                       (* types, t *)
  Tyvar : tyvar -> ty,              (* a *)
  Fun : ty * ty -> ty,              (* t1 -> t2 *)
  All : <<tyvar>>ty -> ty,          (* All a. t *)
  Error : string -> ty;               (* Type error - put here since no exceptions *)

name var;                           (* variables, x *)

type expr where                     (* expressions, e *)
  Var : var -> expr,                (* x *)
  Lam : ty * <<var>>expr -> expr,   (* \x:t.e *)
  App : expr * expr -> expr,        (* e1 e2 *)
  Gen : <<tyvar>>expr -> expr,      (* \a.e *)
  Spec : expr * ty -> expr;         (* e t *)

type nf, ne where                   (* normal and neutral forms *)
  L : ty * <<var>>nf -> nf,
  G : <<tyvar>>nf -> nf,
  N : ne -> nf,
  Apply_error : unit -> nf,
  Specialize_error : unit -> nf,
  V : var -> ne,
  A : ne * nf -> ne,
  S : ne * ty -> ne;

type tyenv where                    (* typing environment : list of (var * ty) *)
  Nil : unit -> tyenv,
  Hd : (var * ty) * tyenv -> tyenv;

let cons = fun(x : (var * ty) * tyenv) ->
  let (y, env) = x in Hd(y, env);

(* Get the type associated with a variable in a typing environment *)
let lookup(x : var * tyenv) : ty =
  let (v, env) = x in
  match env with
  | Nil _ -> Error("Lookup failure")
  | Hd((v', t'), env) -> if v = v' then t' else lookup(v, env);

(* Capture-avoiding substitution of types for type variables in types *)
let subst = fun (x : tyvar * (ty * ty)) ->
  let (a, (t, t')) = x in
  let sub(t' : ty) : ty =
    match t' with
    | Tyvar b -> if a = b then t else t'
    | Fun(t1, t2) -> Fun(sub t1, sub t2)
    | All(<<a>>t1) -> All(<<a>>(sub t1))
      (* note that a is automatically fresh for t, so we
         avoid "capture" in this case! *)
  in sub t';

let typ(env : tyenv) : expr -> ty =
  (* Type of an expression in a typing environment, if any *)
  fun (e : expr) ->
    match e with
    | Var x -> lookup(x, env)
    | Lam(t, <<x>>e) -> Fun(t, (typ (cons((x, t), env))) e)
    | App(e1, e2) ->
        (match (typ env) e1 with
        | Fun(t1, t2) -> 
						if t1 = ((typ env) e2) then t2
						else Error("Argument does not match function type")
        | _ -> Error("Expression not a function type"))
    | Gen(<<a>>e) -> All(<<a>>((typ env) e))
      (* note that a is automatically fresh for env, so the usual
         side-condition "'a' not a free type variable of env" is
         unnecessary! *)
    | Spec(e, t) ->
        (match (typ env) e with
        | All(<<a>>t1) -> subst (a, (t, t1))
        | _ -> Error("Expected All(-)"));

(*
   In the original Fresh OCaml example, the following functions:

        apply, specialize, sub_ty_nf, sub_ty_ne,
        sub_nf_nf and sub_nf_nf

   were mutually recursive curried functions. However Midi-FreshML
   doesn't provide built-in support for mutually recursive functions
   and the syntax for curried functions is a little verbose.

   In light of these observations these functions have been altered
   slightly to take tuple arguments and to be able to call one another
   whilst still being accessible from the top-level.

   The key idea for this last point was for apply and specialize to
   take as their argument a function of the same type as sub_nf_nf
   and then to override them with sub_nf_nf passed as that argument
   once it was defined:

      let apply = apply sub_nf_nf;

    This allows apply and specialize to be used later on without
    differing too much from the original Fresh OCaml PLC code.
*)

let apply(f : (nf * (var * nf)) -> nf) : nf * nf -> nf =
  fun (x : nf * nf) ->
    let (n, n') = x in
    (* Apply a normal form to a normal form *)
    match n with
    | L(t1, <<x1>>n1) -> f (n', (x1, n1))
    | G _ -> Apply_error()
    | N neu -> N(A(neu, n'));

let specialize(f : (nf * (var * nf)) -> nf) : nf * ty -> nf =
  fun (x : nf * ty) ->
    let (n, t) = x in
    let sub_ty_nf(x : ty * (tyvar * nf)) : nf =
      let (t, (a, n)) = x in
      let sub_ty_ne(x : ty * (tyvar * ne)) : nf =
        let (t, (a, neu)) = x in
        (* Substitute a type for a type variable in a neutral form *)
        match neu with
        | V x1 -> N(V x1)
        | A(neu1, n1) -> (apply f) (sub_ty_ne (t, (a, neu1)), sub_ty_nf (t, (a, n1)))
        | S(neu1, t1) -> (specialize f) (sub_ty_ne (t, (a, neu1)), (subst (a, (t, t1))))
      in
      (* Substitute a type for a type variable in a normal form *)
      match n with
      | L(t1, <<x1>>n1) -> L(subst (a, (t, t1)), <<x1>>(sub_ty_nf (t, (a, n1))))
      | G(<<a1>>n1) -> G(<<a1>>(sub_ty_nf (t, (a, n1))))
      | N neu -> sub_ty_ne (t, (a, neu))
    in
    (* Specialize a normal form at a type *)
    match n with
    | L _ -> Specialize_error()
    | G(<<a1>>n1) -> sub_ty_nf (t, (a1, n1))
    | N neu -> N(S(neu, t));

let sub_nf_nf(x : nf * (var * nf)) : nf =
  let (n', (x, n)) = x in 
  let sub_nf_ne(x : nf * (var * ne)) : nf =
    let (n', (x, neu)) = x in
    (* Substitute a normal form for a variable in neutral form *)
    match neu with
    | V x1 -> if x = x1 then n' else N(V x1)
    | A(neu1, n1) -> (apply sub_nf_nf) (sub_nf_ne (n', (x, neu1)), sub_nf_nf (n', (x, n1)))
    | S(neu1, t1) -> (specialize sub_nf_nf) (sub_nf_ne (n', (x, neu1)), t1)
  in
  (* Substitute a normal form for a variable in a normal form *)
  match n with
  | L(t1, <<x1>>n1) -> L(t1, <<x1>>(sub_nf_nf (n', (x, n1))))
  | G(<<a1>>n1) -> G(<<a1>>(sub_nf_nf (n', (x, n1))))
  | N neu -> sub_nf_ne (n', (x, neu));

let apply = apply sub_nf_nf;

let specialize = specialize sub_nf_nf;

let eval(e : expr) : nf =
  (* Evaluate an expression to beta-normal form (if any) *)
  match e with
  | Var x1 -> N(V x1)
  | Lam(t1, <<x1>>e1) -> L(t1, <<x1>>(eval e1))
  | App(e1, e2) -> apply(eval e1, eval e2)
  | Gen(<<a1>>e1) -> G(<<a1>>(eval e1))
  | Spec(e1, t1) -> specialize(eval e1, t1);

let reify_nf(n : nf) : expr =
  let reify_ne(neu : ne) : expr =
    (* Reify a neutral form as an expression *)
    match neu with
    | V x1 -> Var x1
    | A(neu1, n1) -> App(reify_ne neu1, reify_nf n1)
    | S(neu1, t1) -> Spec(reify_ne neu1, t1)
  in
  (* Reify a normal form as an expression *)
  match n with
  | L(t1, <<x1>>n1) -> Lam(t1, <<x1>>(reify_nf n1))
  | G(<<a1>>n1) -> Gen(<<a1>>(reify_nf n1))
  | N neu -> reify_ne neu;

let normalize = fun(env : tyenv) ->
  fun(e : expr) ->
    (* Normalize a well-typed expression *)
    let t = (typ env) e in (reify_nf(eval e), t);

let b_equiv = fun(env : tyenv) ->
  fun(e : expr) ->
    fun(e' : expr) ->
      (* Beta-equivalence of well-typed expressions *)
      if ((typ env) e) = ((typ env) e) then ((eval e) = (eval e'))
      else false;

(***************************************************************************************
   Example: list processing in PLC
****************************************************************************************)

let (a, a') = (fresh : tyvar, fresh : tyvar);

let a_list =
  (* All a'. a' -> (a -> a' -> a') -> a' *)
  All(<<a'>>(
    Fun(Tyvar a',
      Fun(Fun(Tyvar a, Fun(Tyvar a', Tyvar a')), Tyvar a'))));


let (x, x') = (fresh : var, fresh : var);
let (f, l) = (fresh : var, fresh : var);

let plc_nil =
  (* /\a. /\a'. \x' : a'. \f : a -> a' -> a'. x' *)
  Gen(<<a>>(Gen(<<a'>>(Lam(Tyvar a',
  <<x'>>(Lam(Fun(Tyvar a, Fun(Tyvar a', Tyvar a')),
  <<f>>(Var x'))))))));

((typ (Nil ())) plc_nil) = (All(<<a>>a_list));  (* true *)

let plc_cons =
  (* /\a. \x : a. \l : a_list. /\a'. \x' : a'. \f : a -> a' -> a'. f x (l a' x' f) *) 
  Gen(<<a>>(Lam(Tyvar a, <<x>>(Lam(a_list, <<l>>(Gen(<<a'>>(
    Lam(Tyvar a', <<x'>>(Lam(Fun(Tyvar a, Fun(Tyvar a', Tyvar a')),
    <<f>>(App(App(Var f, Var x), App(App(Spec(Var l, Tyvar a'),
    Var x'), Var f))))))))))))));

let cons_t = ((typ (Nil ())) plc_cons);

cons_t = All(<<a>>(Fun(Tyvar a, Fun(a_list, a_list)))); (* true *)

let plc_iter =
  (* /\a. /\a'. \x' : a'. \f : a -> a' -> a'. \l : a_list. l a' x' f *)
  Gen(<<a>>(Gen<<a'>>(Lam(Tyvar a', <<x'>>(
    Lam(Fun(Tyvar a, Fun(Tyvar a', Tyvar a')), <<f>>(Lam(a_list,
      <<l>>(App(App(Spec(Var l, Tyvar a'), Var x'), Var f))))))))));

((typ (Nil ())) plc_iter) =
  (All(<<a>>(All(<<a'>>(Fun(Tyvar a',
          Fun(Fun(Tyvar a, Fun(Tyvar a', Tyvar a')),
            Fun(a_list, Tyvar a'))))))));   (* true *)

let tenv =
  (* [x' |-> a', f |-> a -> a' -> a'] *)
  Hd((x', Tyvar a'), Hd((f, Fun(Tyvar a, Fun(Tyvar a', Tyvar a'))), Nil ()));

let nil_lhs =
  (* plc_iter a a' x' f (plc_nil a)
     This should be beta-equal to x' *)
  App(App(App(Spec(Spec(plc_iter, Tyvar a),
  Tyvar a'), Var x'), Var f), Spec(plc_nil, Tyvar a));

((typ tenv) nil_lhs) = Tyvar a';  (* true *)

((b_equiv tenv) nil_lhs) (Var x');  (* true *)

let tenv' =
  (* [x |-> a, l |-> a_list, x' |-> a', f |-> a -> a' -> a'] *)
  Hd((x, Tyvar a), Hd((l, a_list), tenv));

let cons_lhs =
  (* plc_iter a a' x' f (plc_cons a x l) *)
  App(App(App(Spec(Spec(plc_iter, Tyvar a),
    Tyvar a'), Var x'), Var f),
    App(App(Spec(plc_cons, Tyvar a), Var x), Var l));

((typ tenv') cons_lhs) = Tyvar a';  (* true *)

let cons_rhs =
  (* f x (plc_iter a a' x' f l) *)
  App(App(Var f, Var x), App(App(App(Spec(Spec(plc_iter, Tyvar a),
    Tyvar a'), Var x'), Var f), Var l));

((typ tenv') cons_rhs) = Tyvar a';  (* true *)

((b_equiv tenv') cons_lhs) cons_rhs;  (* true *)

