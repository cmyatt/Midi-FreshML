(* Midi Fresh-ML test program #1
 * Polymorphic Lambda Calculus with capture-avoiding substitution
 *)

name tyvar, var;

type typ, exp where
  Tyvar : tyvar -> typ,
  Fun : typ * typ -> typ,
  All : <<tyvar>>typ -> typ,
  Var : var -> exp,
  Lam : typ * <<var>>exp -> exp,
  App : exp * exp -> exp,
  Gen : <<tyvar>>exp -> exp,
  Spec : exp * typ -> exp;

(* Capture-avoiding substitution *)
(* Substitute e for x in e' *)
let subst = fun (x : var) ->
	fun (e : exp) ->
		let s(e' : exp) : exp =
			match e' with
			| Var y -> if x = y then e else e'
			| Lam(t, <<y>>z) -> Lam(t, <<y>>(s z))
			| App(y, z) -> App(s y, s z)
			| Gen(<<t>>y) -> Gen(<<t>>(s y))
			| Spec(y, t) -> Spec(s y, t)
		in s;

let (x, y) = (fresh : var, fresh : var);

let v = Var x;

let sub = subst y;

let e = (sub v) (Var y);

let e' = (sub v) (Lam (Tyvar (fresh : tyvar), <<y>>(Var y)));

